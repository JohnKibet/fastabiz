@page "/driver/deliveries"
@layout MainLayout
@inject AuthenticationStateProvider AuthProvider 
@using frontend.Models
@using frontend.Models.Shared
@using frontend.Pages.Shared.Components.Tables
@inject DeliveryService DeliveryService
@inject ToastService ToastService
@inject NavigationManager Navigation
@inject DeliveryService DeliveryService
@attribute [Authorize(Roles = "driver")]

<h2 class="text-2xl font-semibold text-gray-800 mb-6">All Deliveries</h2>

<div class="flex flex-col md:flex-row md:items-center md:justify-between gap-4 mb-6">
    <input
        @bind="searchTerm"
        type="text"
        placeholder="Search by customer, pickup, or delivery..."
        class="w-full pl-8 pr-4 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-orange-500"
    />
    <svg
        xmlns="http://www.w3.org/2000/svg"
        width="20"
        height="20"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
        class="lucide lucide-search absolute text-gray-400"
    >
        <path d="m21 21-4.34-4.34" />
        <circle cx="11" cy="11" r="8" />
    </svg>

    <!-- Status Filter -->
    <select 
    @bind="statusFilter"
            class="w-full md:w-48 px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-orange-500 text-sm text-gray-700">
        <option value="">All Statuses</option>
        <option value="Assigned">Assigned</option>
        <option value="PickedUp">PickedUp</option>
        <option value="Delivered">Delivered</option>
        <option value="Failed">Failed</option>
    </select>

    <!-- Start Date -->
    <input
        @bind="startDate"
        type="date"
        class="w-full md:w-48 px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-orange-500 text-sm text-gray-700"
    />

    <!-- End Date -->
    <input
        @bind="endDate"
        type="date"
        class="w-full md:w-48 px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-orange-500 text-sm text-gray-700"
    />
</div>

@if (deliveries == null)
{
    <div class="text-gray-500">Loading deliveries...</div>
}
else if (deliveries.Count == 0)
{
    <div class="text-gray-600">No deliveries found.</div>
}
else
{
    <div class="overflow-x-auto bg-white shadow-sm border rounded-lg">
        <!-- Deliveries Table -->
        <DeliveriesTable
            PagedDeliveries="FilteredDeliveries.ToList()"
            CurrentPage="currentPage"
            PageSize="pageSize"
            OnView="ViewDelivery"
            OnEdit="EditDelivery"
            OnDelete="ConfirmDelete"
            GetStatusClass="GetStatusClass" 
        />

        <!-- View & Edit Modal -->
        <TableRowModal TModel="Delivery"
            IsOpen="isEditModalOpen"
            Model="editableDelivery"
            IsEditMode="isEditMode"
            Close="CloseModal"
            EnableEdit="@(() => isEditMode = true)"
            
            Fields="deliveryFields"
            
        />

        <!-- Delete Modal -->
        <DeleteConfirmationModal 
            IsVisible="isDeleteModalOpen"
            IsVisibleChanged="@((bool value) => isDeleteModalOpen = value)"
            Message="Delete this delivery?"
            OnConfirm="DeleteDelivery"
        />
    </div>

    <!-- Pagination -->
    <PaginationControls 
        CurrentPage="@currentPage"
        TotalPages="@TotalPages"
        OnNextPage="NextPage"
        OnPreviousPage="PrevPage"
    />
}


@code {
    private List<Delivery> deliveries = new();
    private string searchTerm = "";
    private string statusFilter = "";
    private int currentPage = 1;
    private int pageSize = 10;
    private DateTime? startDate;
    private DateTime? endDate;

    private bool CanGoPrev => currentPage > 1;
    private bool CanGoNext => currentPage < TotalPages;
    private Delivery? selectedDelivery;
    private Delivery editableDelivery = new();
    private bool isEditModalOpen = false;
    private bool isEditMode = false;
    private bool isDeleteModalOpen = false;
    private Guid deliveryToDeleteId;
    private List<IFieldDefinitionBase> deliveryFields = new();

    protected override async Task OnInitializedAsync()
    {
        var result = await DeliveryService.GetDeliveries();
        if (result.Success && result.Data != null)
        {
            deliveries = result.Data;
        }
    }

    private IEnumerable<Delivery>FilteredDeliveries => 
        deliveries?
        .Where(d =>
            (string.IsNullOrWhiteSpace(searchTerm)) &&
            (string.IsNullOrWhiteSpace(statusFilter) || 
            d.Status.ToString().Contains(statusFilter, StringComparison.OrdinalIgnoreCase)) &&
            (!startDate.HasValue || d.AssignedAt.Date >= startDate.Value.Date) &&
            (!endDate.HasValue || d.AssignedAt.Date <= endDate.Value.Date)
        ) ?? Enumerable.Empty<Delivery>();
    private int TotalPages => (int)Math.Ceiling((double)FilteredDeliveries.Count() / pageSize);

    private void NextPage()
    {
        if (currentPage < TotalPages)
            currentPage++;
    }
    private void PrevPage()
    {
        if (currentPage > 1)
            currentPage--;
    }

    private void BuildDeliveryFields(Delivery delivery)
    {
        deliveryFields = new List<IFieldDefinitionBase>
        {
            new FieldDefinition<string>
            {
                Label = "DeliveryStatus",
                Type = "text",
                Value = delivery.Status.ToString(),
                Options =  Enum.GetNames(typeof(DeliveryStatus)).ToList(),
                ValueChanged = EventCallback.Factory.Create<string>(this, val => 
                {
                    if (Enum.TryParse<DeliveryStatus>(val, out var status))
                    delivery.Status = status;
                })
            },
        };
    }

    private void ViewDelivery(Guid id)
    {
        selectedDelivery = deliveries?.FirstOrDefault(o => o.ID == id);
        if (selectedDelivery is not null)
        {
            editableDelivery = new Delivery
            {
                ID = selectedDelivery.ID,
                Status = selectedDelivery.Status
                // other fields
            };
            BuildDeliveryFields(editableDelivery);

            isEditMode = false;
            isEditModalOpen = true;
        }
    }

    private void EditDelivery(Guid id)
    {
        selectedDelivery = deliveries?.FirstOrDefault(o => o.ID == id);
        if (selectedDelivery is not null)
        {
            editableDelivery = new Delivery
            {
                ID = selectedDelivery.ID,
                Status = selectedDelivery.Status
                // other fields
            };
            BuildDeliveryFields(editableDelivery);

            isEditMode = true;
            isEditModalOpen = true;
        }
    }

    private void CloseModal()
    {
        isEditModalOpen = false;
        selectedDelivery = null;
    }

    private void OpenEditModal(Delivery delivery)
    {
        selectedDelivery = delivery;
        editableDelivery = new Delivery
        {
            ID = delivery.ID,
            Status = delivery.Status,
            // Add other properties you want editable
        };
        BuildDeliveryFields(editableDelivery);

        isEditModalOpen = true;
    }

    private void ConfirmDelete(Guid id)
    {
        deliveryToDeleteId = id;
        isDeleteModalOpen = true;   
    }

    private void CancelDelete()
    {
        isDeleteModalOpen = false;
        deliveryToDeleteId = Guid.Empty;
    }

    private async Task DeleteDelivery()
    {
        if (deliveryToDeleteId != Guid.Empty)
        {
            bool success = await DeliveryService.DeleteDelivery(deliveryToDeleteId);

            if (success)
            {
                var result = await DeliveryService.GetDeliveries();
                if (result.Success && result.Data != null)
                {
                    deliveries = result.Data;
                    ToastService.ShowToast("Delivery deleted successfully", ToastService.ToastLevel.Success);
                }
            }
            else
            {
                ToastService.ShowToast("Failed to delete delivery", ToastService.ToastLevel.Error);
            }
        }

        isDeleteModalOpen = false;
        deliveryToDeleteId = Guid.Empty;
    }

    private string GetStatusClass(string status) => status.ToLower() switch
    {
        "assigned" => "text-yellow-600 bg-yellow-100 px-2 py-1 rounded text-xs font-medium",
        "pickedup" => "text-orange-600 bg-orange-100 px-2 py-1 rounded text-xs font-medium",
        "delivered" => "text-green-600 bg-green-100 px-2 py-1 rounded text-xs font-medium",
        "failed" => "text-red-600 bg-red-100 px-2 py-1 rounded text-xs font-medium",
        _ => "text-gray-600 bg-gray-100 px-2 py-1 rounded text-xs font-medium"
    };
}
