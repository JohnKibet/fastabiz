@using System.Security.Claims
@using frontend.Models
@using frontend.Pages.Shared.Icons
@inject AuthenticationStateProvider AuthProvider

<div class="flex flex-col min-h-screen bg-white border-r border-gray-200 shadow-sm
            transition-all duration-300 ease-in-out @(IsCollapsed ? "w-16" : "w-64")">

    <!-- Header -->
    <div class="flex items-center justify-between px-3 py-3 border-b bg-gray-50">
        @if (!IsCollapsed)
        {
            <div class="flex items-center justify-center text-xl font-semibold font-poppins text-gray-800">
                FastaBiz
            </div>
        }

        <button class="p-1 rounded hover:bg-gray-100" @onclick="ToggleSidebar" aria-label="Toggle sidebar">
            <LucideIcon Name="@(IsCollapsed ? "chevrons-right" : "chevrons-left")" Size="7" />
        </button>
    </div>

    <!-- Menu -->
    <nav class="flex-1 overflow-y-auto mt-3 px-1 space-y-3">
        @if (Role == "admin")
        {
            <SidebarSection Title="Operations" Icon="todo" 
                            SectionKey="AdminOperations"
                            IsCollapsed="IsCollapsed" Items="AdminOperations"
                            IsOpen="@IsSectionOpen(nameof(AdminOperations))"
                            OnToggle="@ToggleSection" />

            <SidebarSection Title="Inventory" Icon="boxes"
                            SectionKey="AdminInventory"
                            IsCollapsed="IsCollapsed" Items="AdminInventory"
                            IsOpen="@IsSectionOpen(nameof(AdminInventory))"
                            OnToggle="@ToggleSection" />

            <SidebarSection Title="Users" Icon="users"
                            SectionKey="AdminUsers"
                            IsCollapsed="IsCollapsed" Items="AdminUsers"
                            IsOpen="@IsSectionOpen(nameof(AdminUsers))"
                            OnToggle="@ToggleSection" />

            <SidebarSection Title="Stores" Icon="store"
                            SectionKey="AdminStores"
                            IsCollapsed="IsCollapsed" Items="AdminStores"
                            IsOpen="@IsSectionOpen(nameof(AdminStores))"
                            OnToggle="@ToggleSection" />

            <SidebarSection Title="Reports" Icon="chart"
                            SectionKey="AdminReports"
                            IsCollapsed="IsCollapsed" Items="AdminReports"
                            IsOpen="@IsSectionOpen(nameof(AdminReports))"
                            OnToggle="@ToggleSection" />
        }
        else if (Role == "driver")
        {
            <SidebarSection Title="Driver Panel" Icon="truck"
                            IsCollapsed="IsCollapsed" Items="DriverMenu"
                            IsOpen="@IsSectionOpen(nameof(DriverMenu))"
                            OnToggle="@ToggleSection" />
        }
        else if (Role == "customer")
        {
            <SidebarSection Title="Customer Panel" Icon="shopping-bag"
                            IsCollapsed="IsCollapsed" Items="CustomerMenu"
                            IsOpen="@IsSectionOpen(nameof(CustomerMenu))"
                            OnToggle="@ToggleSection" />
        }
        else
        {
            <p class="text-sm text-gray-500 px-4">No menu available for your role.</p>
        }
    </nav>

    <!-- Footer -->
    <div class="border-t bg-gray-50 px-3 py-3 text-xs text-gray-500">
        @if (!IsCollapsed)
        {
            <div class="flex items-center justify-between">
                <span>Â© 2025 Logistics Platform</span>
            </div>
        }
        else
        {
            <div class="flex justify-center">
                <i class="lucide copyright w-4 h-4"></i>
            </div>
        }
    </div>
</div>

@code {
    private bool IsCollapsed = false;
    private string? Role;
    // keep track of open sections by a stable key (use nameof of the property)
    private HashSet<string> openSections = new();

    [Parameter] public EventCallback<bool> OnCollapseChanged { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthProvider.GetAuthenticationStateAsync();
        Role = state.User.FindFirst(ClaimTypes.Role)?.Value ?? "guest";
    }

    private void ToggleSidebar()
    {
        IsCollapsed = !IsCollapsed;
        // when collapsing, close all open sections overlay to keep UI tidy
        if (IsCollapsed) openSections.Clear();
        OnCollapseChanged.InvokeAsync(IsCollapsed);
    }

    private void ToggleSection(string sectionKey)
    {
        if (openSections.Contains(sectionKey))
            openSections.Remove(sectionKey);
        else
            openSections.Add(sectionKey);
        StateHasChanged();
    }

    private bool IsSectionOpen(string sectionKey) => openSections.Contains(sectionKey);

    #region menu definitions
    private List<SidebarMenuItem> AdminOperations => new()
    {
        new("Dashboard", "/admin/dashboard", "house"),
        new("Orders", "/admin/orders", "file-stack"),
        new("Create Order", "/admin/createorder", "file-plus")
    };

    private List<SidebarMenuItem> AdminInventory => new()
    {
        new("Inventories", "/admin/inventories", "box-open"),
        new("Create Inventory", "/admin/createinventory", "folder-plus")
    };

    private List<SidebarMenuItem> AdminUsers => new()
    {
        new("Users", "/admin/users", "users"),
        new("Create User", "/admin/createuser", "user-plus")
    };

    private List<SidebarMenuItem> AdminStores => new()
    {
        new("My Store", "/admin/my-store", "map-pin-store"),
        new("Create Store", "/admin/createstore", "create-store"),
        new("Map", "/admin/map", "map")
    };

    private List<SidebarMenuItem> AdminReports => new()
    {
        new("Reports", "/admin/reports", "chart-up")
    };

    private List<SidebarMenuItem> DriverMenu => new()
    {
        new("Dashboard", "/driver/dashboard", "layout-dashboard"),
        new("Deliveries", "/driver/deliveries", "package"),
        new("Route", "/driver/route", "route"),
        new("Proof", "/driver/proof", "package-check")
    };

    private List<SidebarMenuItem> CustomerMenu => new()
    {
        new("Dashboard", "/customer/dashboard", "layout-dashboard"),
        new("New Order", "/customer/neworder", "file-plus"),
        new("My Orders", "/customer/myorders", "files"),
        new("Rate Delivery", "/customer/feedback", "star"),
        new("Track Order", "/customer/trackorder", "route"),
        new("Payments", "/customer/payments", "credit-card")
    };
    #endregion
}
