@using frontend.Models
@using frontend.Pages.Shared.Icons

<div class="px-1 relative">
    <!-- Section Header -->
    <div 
    class="@($"flex items-center gap-3 px-3 py-2 rounded-md cursor-pointer select-none transition-colors duration-150 " +
                  (IsOpen
                        ? "bg-stoneblue-light text-stoneblue font-semibold border-l-4 border-stoneblue"
                        : "text-gray-700 hover:bg-stoneblue-hover hover:text-stoneblue"))"
         @onclick="Toggle"
         role="button"
         tabindex="0"
         aria-expanded="@IsOpen"
         title="@Title">

        <!-- Left icon -->
        <LucideIcon Name="@Icon" Size="5" Class="text-gray-700" />

        @if (!IsCollapsed)
        {
            <div class="flex-1 flex items-center justify-between">
                <span class="text-sm font-medium">@Title</span>
                @if (IsOpen)
                {
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none"
                        stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                        class="lucide lucide-chevron-down">
                        <path d="m6 9 6 6 6-6" />
                    </svg>
                }
                else
                {
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none"
                        stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                        class="lucide lucide-chevron-left">
                        <path d="m15 18-6-6 6-6" />
                    </svg>
                }
            </div>
        }
    </div>

    <!-- Dropdown items -->
    <div class="@($"overflow-hidden transition-all duration-300 ease-in-out {(IsOpen ? "max-h-64 mt-1" : "max-h-0")}")">
        @if (!IsCollapsed)
        {
            <ul class="ml-6 space-y-1">
                @foreach (var item in Items)
                {
                    <SidebarItem Item="item" IsCollapsed="IsCollapsed" />
                }
            </ul>
        }
    </div>
</div>

@code {
    [Parameter] public string Title { get; set; } = string.Empty;
    [Parameter] public string SectionKey { get; set; } = string.Empty;
    [Parameter] public string Icon { get; set; } = string.Empty;
    [Parameter] public List<SidebarMenuItem> Items { get; set; } = new();
    [Parameter] public bool IsCollapsed { get; set; }
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public EventCallback<string> OnToggle { get; set; }

    private async Task Toggle() => await OnToggle.InvokeAsync(SectionKey);
}
