@using frontend.Models
@using frontend.Pages.Shared.Icons
@inject NavigationManager Nav

<li class="relative group">
    <NavLink href="@Item.Link" Match="NavLinkMatch.All"
            class="@($"""flex items-center justify-between px-3 py-2 rounded-md text-sm transition-colors duration-150 {(IsActive ? "bg-stoneblue-light text-stoneblue font-semibold border-l-4 border-stoneblue" : "text-gray-700 hover:bg-stoneblue-hover hover:text-stoneblue")} """)"
            title="@Item.Title">

        <div class="flex items-center gap-3">
            <LucideIcon Name="@Item.Icon" Size="4" />

            @if (!IsCollapsed)
            {
                <span class="truncate">@Item.Title</span>
            }
        </div>

        @if (!IsCollapsed && Item.BadgeCount.HasValue)
        {
            <span class="bg-orange-500 text-white text-xs font-semibold rounded-full px-2 py-0.5 ml-2">
                @Item.BadgeCount
            </span>
        }
    </NavLink>

    @if (IsCollapsed)
    {
        <div class="absolute left-full top-1/2 -translate-y-1/2 ml-2 opacity-0 group-hover:opacity-100
                    bg-gray-900 text-white text-xs px-2 py-1 rounded-md whitespace-nowrap shadow-lg transition-opacity duration-150 pointer-events-none">
            @Item.Title
        </div>
    }
</li>

@code {
    [Parameter] public SidebarMenuItem Item { get; set; } = default!;
    [Parameter] public bool IsCollapsed { get; set; }

    private bool IsActive =>
        Nav.Uri.TrimEnd('/').EndsWith(Item.Link.TrimEnd('/'), StringComparison.OrdinalIgnoreCase)
        || (Item.SubItems?.Any(sub => Nav.Uri.Contains(sub.Link, StringComparison.OrdinalIgnoreCase)) ?? false);
}
