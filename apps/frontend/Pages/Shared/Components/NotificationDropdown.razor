@using frontend.Models.Notification
@using frontend.Services.CustomAuthStateProvider
@inject NotificationService NotificationService
@inject ToastService ToastService
@inject CustomAuthStateProvider AuthProvider
@inject NavigationManager Navigation

<div class="relative">
    <button class="relative text-gray-600 hover:text-orange-600" @onclick="ToggleDropdown">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" ... class="lucide lucide-bell">
            <path d="M10.268 21a2 2 0 0 0 3.464 0"/>
            <path d="M3.262 15.326A1 1 0 0 0 4 17h16a1 1 0 0 0 .74-1.673C19.41 13.956 18 12.499 18 8A6 6 0 0 0 6 8c0 4.499-1.411 5.956-2.738 7.326"/>
        </svg>

        @if (UnreadCount > 0)
        {
            <span class="absolute -top-1 -right-1 bg-red-500 text-white text-xs font-bold px-1.5 py-0.5 rounded-full shadow-md">
                @UnreadCount
            </span>
        }
    </button>

    @if (ShowDropdown)
    {
        <div class="absolute right-0 top-10 w-80 bg-white border shadow-lg rounded-2xl p-3 z-50">
            <div class="flex justify-between items-center mb-2">
                <h3 class="font-semibold text-gray-700">Notifications</h3>
                <button class="text-xs text-orange-600 hover:underline" @onclick="MarkAllAsRead">
                    Mark all as read
                </button>
            </div>

            @if (notifications.Any())
            {
                @foreach (var note in notifications.Take(5))
                {
                    <div class="p-2 hover:bg-gray-100 rounded-lg text-sm text-gray-700 cursor-pointer">
                        <p>@note.Message</p>
                        <span class="text-xs text-gray-400">@note.SentAt.ToShortTimeString()</span>
                    </div>
                }

                <div class="border-t mt-2 pt-2 text-center">
                    <button class="text-sm text-blue-600 hover:underline" @onclick='()=>Navigation.NavigateTo("/admin/notifications")'>
                        View all
                    </button>
                </div>
            }
            else
            {
                <p class="text-sm text-gray-500 text-center">No notifications</p>
            }
        </div>
    }
</div>

@code {
    [CascadingParameter] public Guid? UserId { get; set; }
    private bool ShowDropdown;
    private List<Notification> notifications = new();
    private int UnreadCount;

    private async Task LoadNotifications()
    {
        if (UserId.HasValue)
        {
            notifications = await NotificationService.GetNotificationByUser(UserId.Value);
            UnreadCount = notifications.Count(n => n.Status != NotificationStatus.Read);
        }
        else
        {
            return;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadNotifications();
    }

    private void ToggleDropdown()
    {
        ShowDropdown = !ShowDropdown;
    }

    private async Task MarkAllAsRead()
    {
        if (UserId.HasValue)
        {
            await NotificationService.MarkAllAsRead(UserId.Value);
            await LoadNotifications();
        }
        else
        {
            return;
        }
    }
}
