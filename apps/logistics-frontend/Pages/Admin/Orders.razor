@page "/admin/orders"
@layout MainLayout
@using logistics_frontend.Models.Order
@inject OrderService OrderService
@inject ToastService ToastService
@inject UserService UserService
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Navigation
@inject IJSRuntime JS
@attribute [Authorize(Roles = "admin")]

<h2 class="text-2xl font-semibold text-gray-800 mb-6">All Orders</h2>

<div class="flex flex-col md:flex-row md:items-center md:justify-between gap-4 mb-6">
    <input
        @bind="searchTerm"
        type="text"
        placeholder="Search by customer, pickup, or delivery..."
        class="w-full pl-8 pr-4 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-orange-500"
    />
    <svg
        xmlns="http://www.w3.org/2000/svg"
        width="20"
        height="20"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
        class="lucide lucide-search absolute text-gray-400"
    >
        <path d="m21 21-4.34-4.34" />
        <circle cx="11" cy="11" r="8" />
    </svg>

    <!-- Status Filter -->
    <select @bind="statusFilter"
            class="w-full md:w-48 px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-orange-500 text-sm text-gray-700">
        <option value="">All Statuses</option>
        <option value="pending">Pending</option>
        <option value="completed">Completed</option>
        <option value="cancelled">Cancelled</option>
    </select>

    <!-- Start Date -->
    <input
        @bind="startDate"
        type="date"
        class="w-full md:w-48 px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-orange-500 text-sm text-gray-700"
    />

    <!-- End Date -->
    <input
        @bind="endDate"
        type="date"
        class="w-full md:w-48 px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-orange-500 text-sm text-gray-700"
    />
</div>

@if (orders == null)
{
    <div class="text-gray-500">Loading orders...</div>
}
else if (orders.Count == 0)
{
    <div class="text-gray-600">No orders found.</div>
}
else
{
    <div class="overflow-x-auto bg-white shadow-sm border rounded-lg">
        <table class="min-w-full table-auto text-sm text-left text-gray-700">
            <thead class="bg-gray-50 text-xs uppercase text-gray-500 border-b">
                <tr>
                    <th class="px-4 py-3">No.</th>
                    <th class="px-4 py-3">Customer Name</th>
                    <th class="px-4 py-3">Quantity</th>
                    <th class="px-4 py-3">Pickup</th>
                    <th class="px-4 py-3">Delivery</th>
                    <th class="px-4 py-3">Status</th>
                    <th class="px-4 py-3">Created At</th>
                    <th class="px-4 py-3 text-right">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var (order, index) in PagedOrders.Select((o, i) => (o, i)))
                {
                    <tr class="border-b hover:bg-gray-50">
                        <td class="px-4 py-2">@((index + 1) + (currentPage - 1) * pageSize)</td>
                        <td class="px-4 py-2">
                            @customerNames.GetValueOrDefault(order.CustomerID, "Customer")
                        </td>
                        <td class="px-4 py-2">@order.Quantity</td>
                        <td class="px-4 py-2">@order.PickupLocation</td>
                        <td class="px-4 py-2">@order.DeliveryLocation</td>
                        <td class="px-4 py-2">
                            <span class="@GetStatusClass(order.OrderStatus)">
                                @order.OrderStatus
                            </span>
                        </td>
                        <td class="px-4 py-2">@order.CreatedAt.ToString("g")</td>
                        <td class="px-4 py-2 text-right">
                            <div class="flex items-center gap-2 justify-end">
                                <button class="text-blue-600 hover:underline" @onclick="() => ViewOrder(order.ID)">View</button>
                                <button class="text-yellow-600 hover:underline" @onclick="() => EditOrder(order.ID)">Edit</button>
                                <button class="text-red-600 hover:underline" @onclick="() => ConfirmDelete(order.ID)">Delete</button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <!-- View & Edit Modal -->
        @if (isEditModalOpen && selectedOrder != null)
        {
            <div class="fixed inset-0 bg-black bg-opacity-40 z-50 flex items-center justify-center">
                <div class="bg-white w-full max-w-xl p-6 rounded-lg shadow-lg relative">
                    <h3 class="text-lg font-semibold mb-4">
                        @((isEditMode ? "Edit" : "View") + " Order")
                    </h3>

                    <div class="space-y-4">
                        <!-- Pickup -->
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Pickup Location</label>
                            @if (isEditMode)
                            {
                                <input class="w-full px-3 py-2 border rounded-md" @bind="editableOrder.PickupLocation" />
                            }
                            else
                            {
                                <p class="text-gray-800">@selectedOrder.PickupLocation</p>
                            }
                        </div>

                        <!-- Delivery -->
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Delivery Location</label>
                            @if (isEditMode)
                            {
                                <input class="w-full px-3 py-2 border rounded-md" @bind="editableOrder.DeliveryLocation" />
                            }
                            else
                            {
                                <p class="text-gray-800">@selectedOrder.DeliveryLocation</p>
                            }
                        </div>

                        <!-- Status -->
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Status</label>
                            @if (isEditMode)
                            {
                                <select class="w-full px-3 py-2 border rounded-md" @bind="editableOrder.OrderStatus">
                                    <option value="pending">Pending</option>
                                    <option value="completed">Completed</option>
                                    <option value="cancelled">Cancelled</option>
                                </select>
                            }
                            else
                            {
                                <p class="text-gray-800">@selectedOrder.OrderStatus</p>
                            }
                        </div>
                    </div>

                    <div class="mt-6 flex justify-between">
                        <button class="text-sm px-4 py-2 bg-gray-200 rounded" @onclick="CloseModal">Close</button>

                        @if (!isEditMode)
                        {
                            <button class="text-sm px-4 py-2 bg-yellow-500 text-white rounded" @onclick="() => isEditMode = true">
                                Edit
                            </button>
                        }
                        else
                        {
                            <button class="text-sm px-4 py-2 bg-green-600 text-white rounded" @onclick="SaveChanges">
                                Save Changes
                            </button>
                        }
                    </div>
                </div>
            </div>
        }

        <!-- Delete Modal -->
        @if (isDeleteModalOpen)
        {
            <div class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
                <div class="bg-white rounded-lg p-6 w-full max-w-md shadow-lg">
                    <h3 class="text-lg font-semibold text-gray-800 mb-4">Confirm Deletion</h3>
                    <p class="text-gray-700 mb-6">
                        Are you sure you want to delete this order?
                    </p>
                    <div class="flex justify-end gap-4">
                        <button class="px-4 py-2 bg-gray-200 rounded" @onclick="CancelDelete">Cancel</button>
                        <button class="px-4 py-2 bg-red-600 text-white rounded" @onclick="DeleteOrder">Delete</button>
                    </div>
                </div>
            </div>
        }

    </div>

    <div class="flex justify-between items-center mt-4">
        <button
            class="px-3 py-1 bg-gray-200 text-sm rounded disabled:opacity-50"
            @onclick="PrevPage" disabled="@(!CanGoPrev)">Previous</button>

        <span class="text-sm text-gray-700">
            Page @currentPage of @TotalPages
        </span>

        <button
            class="px-3 py-1 bg-gray-200 text-sm rounded disabled:opacity-50"
            @onclick="NextPage" disabled="@(!CanGoNext)">Next</button>

    </div>
}

@code {
    private List<Order>? orders;
    private Dictionary<Guid, string> customerNames = new();
    private string searchTerm = "";
    private string statusFilter = "";
    private int currentPage = 1;
    private int pageSize = 10;
    private DateTime? startDate;
    private DateTime? endDate;

    private bool CanGoPrev => currentPage > 1;
    private bool CanGoNext => currentPage < TotalPages;
    private Order? selectedOrder;
    private Order editableOrder = new();
    private bool isEditModalOpen = false;
    private bool isEditMode = false;
    private bool isDeleteModalOpen = false;
    private Guid orderToDeleteId;

    private IEnumerable<Order> FilteredOrders =>
    orders?
    .Where(o =>
        (string.IsNullOrWhiteSpace(searchTerm) ||
         customerNames.GetValueOrDefault(o.CustomerID, "").Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
         o.PickupLocation.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
         o.DeliveryLocation.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) &&
        (string.IsNullOrWhiteSpace(statusFilter) ||
         o.OrderStatus.Equals(statusFilter, StringComparison.OrdinalIgnoreCase)) &&
        (!startDate.HasValue || o.CreatedAt.Date >= startDate.Value.Date) &&
        (!endDate.HasValue || o.CreatedAt.Date <= endDate.Value.Date)
    ) ?? Enumerable.Empty<Order>();


    private IEnumerable<Order> PagedOrders =>
        FilteredOrders
        .Skip((currentPage - 1) * pageSize)
        .Take(pageSize);

    private int TotalPages => (int)Math.Ceiling((double)FilteredOrders.Count() / pageSize);
    private void NextPage()
    {
        if (currentPage < TotalPages)
            currentPage++;
    }
    private void PrevPage()
    {
        if (currentPage > 1)
            currentPage--;
    }
    protected override async Task OnInitializedAsync()
    {
        orders = await OrderService.GetAllOrders();
    }

    private void ViewOrder(Guid id)
    {
        selectedOrder = orders?.FirstOrDefault(o => o.ID == id);
        if (selectedOrder is not null)
        {
            editableOrder = new Order
            {
                ID = selectedOrder.ID,
                PickupLocation = selectedOrder.PickupLocation,
                DeliveryLocation = selectedOrder.DeliveryLocation,
                OrderStatus = selectedOrder.OrderStatus
                // other fields
            };

            isEditMode = false;
            isEditModalOpen = true;
        }
    }

    private void EditOrder(Guid id)
    {
        selectedOrder = orders?.FirstOrDefault(o => o.ID == id);
        if (selectedOrder is not null)
        {
            editableOrder = new Order
            {
                ID = selectedOrder.ID,
                PickupLocation = selectedOrder.PickupLocation,
                DeliveryLocation = selectedOrder.DeliveryLocation,
                OrderStatus = selectedOrder.OrderStatus
                // other fields
            };

            isEditMode = true;
            isEditModalOpen = true;
        }
    }

    private void CloseModal()
    {
        isEditModalOpen = false;
        selectedOrder = null;
    }

    private void OpenEditModal(Order order)
    {
        selectedOrder = order;
        editableOrder = new Order
        {
            ID = order.ID,
            PickupLocation = order.PickupLocation,
            DeliveryLocation = order.DeliveryLocation,
            OrderStatus = order.OrderStatus,
            // Add other properties you want editable
        };

        isEditModalOpen = true;
    }

    private async Task SaveChanges()
    {
        if (selectedOrder == null || editableOrder == null)
        return;

        bool updated = false;

        if (editableOrder.PickupLocation != selectedOrder.PickupLocation)
            await OrderService.UpdateOrder(selectedOrder.ID, "PickupLocation", editableOrder.PickupLocation);
            updated = true;

        if (editableOrder.DeliveryLocation != selectedOrder.DeliveryLocation)
            await OrderService.UpdateOrder(selectedOrder.ID, "DeliveryLocation", editableOrder.DeliveryLocation);
            updated = true;

        if (editableOrder.OrderStatus != selectedOrder.OrderStatus)
            await OrderService.UpdateOrder(selectedOrder.ID, "OrderStatus", editableOrder.OrderStatus);
            updated = true;

        if (updated)
        {
            orders = await OrderService.GetAllOrders();
            ToastService.ShowToast("Order updated successfully", ToastService.ToastLevel.Success);
        }
        else
        {
            ToastService.ShowToast("No changes were made", ToastService.ToastLevel.Warning);
        }

        CloseModal();
    }

    private void ConfirmDelete(Guid id)
    {
        orderToDeleteId = id;
        isDeleteModalOpen = true;   
    }

    private void CancelDelete()
    {
        isDeleteModalOpen = false;
        orderToDeleteId = Guid.Empty;
    }

    private async Task DeleteOrder()
    {
        if (orderToDeleteId != Guid.Empty)
        {
            bool success = await OrderService.DeleteOrder(orderToDeleteId);

            if (success)
            {
                orders = await OrderService.GetAllOrders();
                ToastService.ShowToast("Order deleted successfully", ToastService.ToastLevel.Success);
            }
            else
            {
                ToastService.ShowToast("Failed to delete order", ToastService.ToastLevel.Error);
            }
        }

        isDeleteModalOpen = false;
        orderToDeleteId = Guid.Empty;
    }


    private string GetStatusClass(string status) => status.ToLower() switch
    {
        "pending" => "text-yellow-600 bg-yellow-100 px-2 py-1 rounded text-xs font-medium",
        "completed" => "text-green-600 bg-green-100 px-2 py-1 rounded text-xs font-medium",
        "cancelled" => "text-red-600 bg-red-100 px-2 py-1 rounded text-xs font-medium",
        _ => "text-gray-600 bg-gray-100 px-2 py-1 rounded text-xs font-medium"
    };
}
