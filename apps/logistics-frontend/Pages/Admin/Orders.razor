@page "/admin/orders"
@layout MainLayout
@using System.Text.Json
@using logistics_frontend.Models.Order
@using logistics_frontend.Models.Shared
@using logistics_frontend.Pages.Shared.Components.Tables
@inject OrderService OrderService
@inject DropdownDataService DropdownDataService
@inject ToastService ToastService
@inject UserService UserService
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Navigation
@inject IJSRuntime JS
@attribute [Authorize(Roles = "admin")]

<h2 class="text-2xl font-semibold text-gray-800 mb-6">All Orders</h2>

<div class="flex flex-col md:flex-row md:items-center md:justify-between gap-4 mb-6">
    <input
        @bind="searchTerm"
        type="text"
        placeholder="Search by customer, pickup, or delivery..."
        class="w-full pl-8 pr-4 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-orange-500"
    />
    <svg
        xmlns="http://www.w3.org/2000/svg"
        width="20"
        height="20"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
        class="lucide lucide-search absolute text-gray-400"
    >
        <path d="m21 21-4.34-4.34" />
        <circle cx="11" cy="11" r="8" />
    </svg>

    <!-- Status Filter -->
    <select @bind="statusFilter"
            class="w-full md:w-48 px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-orange-500 text-sm text-gray-700">
        <option value="">All Statuses</option>
        <option value="Pending">Pending</option>
        <option value="Assigned">Assigned</option>
        <option value="InTransit">InTransit</option>
        <option value="Delivered">Delivered</option>
        <option value="Cancelled">Cancelled</option>
    </select>

    <!-- Start Date -->
    <input
        @bind="startDate"
        type="date"
        class="w-full md:w-48 px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-orange-500 text-sm text-gray-700"
    />

    <!-- End Date -->
    <input
        @bind="endDate"
        type="date"
        class="w-full md:w-48 px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-orange-500 text-sm text-gray-700"
    />
</div>
@* <SearchFilters
    @bind-SearchTerm="searchTerm"
    @bind-StatusFilter="statusFilter"
    @bind-StartDate="startDate"
    @bind-EndDate="endDate" 
/> *@

@if (orders == null)
{
    <div class="text-gray-500">Loading orders...</div>
}
else if (orders.Count == 0)
{
    <div class="text-gray-600">No orders found.</div>
}
else
{
    <div class="overflow-x-auto bg-white shadow-sm border rounded-lg">
        <!-- Orders Table -->
        <OrderTable
            PagedOrders="FilteredOrders.ToList()"
            CustomerNames="customerNames"
            InventoryCategories="inventoryCategories"
            CurrentPage="currentPage"
            PageSize="pageSize"
            OnView="ViewOrder"
            OnEdit="EditOrder"
            OnDelete="ConfirmDelete"
            GetStatusClass="GetStatusClass"
        />

        <!-- View & Edit Modal -->
        <TableRowModal TModel="Order"
            IsOpen="isEditModalOpen"
            Model="editableOrder"
            IsEditMode="isEditMode"
            Close="CloseModal"
            EnableEdit="@(() => isEditMode = true)"
            Save="SaveChanges"
            Fields="orderFields"
            
        />

        <!-- Delete Modal -->
        <DeleteConfirmationModal 
            IsVisible="isDeleteModalOpen"
            IsVisibleChanged="@((bool value) => isDeleteModalOpen = value)"
            Message="Delete this order?"
            OnConfirm="DeleteOrder"
        />
    </div>

    <!-- Pagination -->
    <PaginationControls 
        CurrentPage="@currentPage"
        TotalPages="@TotalPages"
        OnNextPage="NextPage"
        OnPreviousPage="PrevPage"
    />

}

@code {
    private List<Order>? orders;
    private Dictionary<Guid, string> customerNames = new();
    private Dictionary<Guid, string> inventoryCategories = new();
    private string searchTerm = "";
    private string statusFilter = "";
    private int currentPage = 1;
    private int pageSize = 10;
    private DateTime? startDate;
    private DateTime? endDate;

    private bool CanGoPrev => currentPage > 1;
    private bool CanGoNext => currentPage < TotalPages;
    private Order? selectedOrder;
    private Order editableOrder = new();
    private bool isEditModalOpen = false;
    private bool isEditMode = false;
    private bool isDeleteModalOpen = false;
    private Guid orderToDeleteId;
    private List<IFieldDefinitionBase> orderFields = new();

    private IEnumerable<Order> FilteredOrders =>
    orders?
    .Where(o =>
        (string.IsNullOrWhiteSpace(searchTerm) ||
         customerNames.GetValueOrDefault(o.CustomerID, "").Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
         o.PickupAddress.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
         o.DeliveryAddress.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) &&
        (string.IsNullOrWhiteSpace(statusFilter) ||
         o.Status.ToString().Equals(statusFilter, StringComparison.OrdinalIgnoreCase)) &&
        (!startDate.HasValue || o.CreatedAt.Date >= startDate.Value.Date) &&
        (!endDate.HasValue || o.CreatedAt.Date <= endDate.Value.Date)
    ) ?? Enumerable.Empty<Order>();

    private void BuildOrderFields(Order order)
    {
        orderFields = new List<IFieldDefinitionBase>
        {
            new FieldDefinition<string>
            {
                Label = "PickupLocation",
                Type = "text",
                Value = order.PickupAddress,
                ValueChanged = EventCallback.Factory.Create<string>(this, val => 
                {
                    order.PickupAddress = val;
                })
            },

            new FieldDefinition<string>
            {
                Label = "DeliveryLocation",
                Type = "text",
                Value = order.DeliveryAddress,
                ValueChanged = EventCallback.Factory.Create<string>(this, val => 
                {
                    order.DeliveryAddress = val;
                })  
            }, 

            new FieldDefinition<string>
            {
                Label = "OrderStatus",
                Type = "select",
                Value = order.Status.ToString(),
                Options =  Enum.GetNames(typeof(OrderStatus)).ToList(),
                ValueChanged = EventCallback.Factory.Create<string>(this, val => 
                {
                    if (Enum.TryParse<OrderStatus>(val, out var status))
                    {
                        order.Status = status;
                    }
                })
            }
        };
    }

    private int TotalPages => (int)Math.Ceiling((double)FilteredOrders.Count() / pageSize);
    private void NextPage()
    {
        if (currentPage < TotalPages)
            currentPage++;
    }
    private void PrevPage()
    {
        if (currentPage > 1)
            currentPage--;
    }
    protected override async Task OnInitializedAsync()
    {
        // Get orders
        var orderResult = await OrderService.GetAllCachedOrders();
        if (orderResult.Success && orderResult.Data != null)
        {
            orders = orderResult.Data;
            Console.WriteLine(JsonSerializer.Serialize(orders, new JsonSerializerOptions
            {
                WriteIndented = true
            }));
        }
        else
        {
            orders = new List<Order>();
        }

        // Get dropdown data (customers + inventories)
        var dropdownResult = await DropdownDataService.LoadCachedDropdownData();
        if (dropdownResult.Success)
        {
            var customers = DropdownDataService.Customers;

            // dictionary mapping CustomerID → FullName
            customerNames = customers.ToDictionary(
                c => c.ID,
                c => c.Name
            );

            var inventories = DropdownDataService.Inventories;

            // dictionary mapping OrderID → Category
            inventoryCategories = inventories.ToDictionary(
                i => i.ID,
                i => i.Category
            );
        }
        else
        {
            customerNames = new Dictionary<Guid, string>();
            inventoryCategories = new Dictionary<Guid, string>();
        }
    }

    private void ViewOrder(Guid id)
    {
        selectedOrder = orders?.FirstOrDefault(o => o.ID == id);
        if (selectedOrder is not null)
        {
            editableOrder = new Order
            {
                ID = selectedOrder.ID,
                PickupAddress = selectedOrder.PickupAddress,
                DeliveryAddress = selectedOrder.DeliveryAddress,
                Status = selectedOrder.Status
                // other fields
            };
            BuildOrderFields(editableOrder);

            isEditMode = false;
            isEditModalOpen = true;
        }
    }

    private void EditOrder(Guid id)
    {
        selectedOrder = orders?.FirstOrDefault(o => o.ID == id);
        if (selectedOrder is not null)
        {
            editableOrder = new Order
            {
                ID = selectedOrder.ID,
                PickupAddress = selectedOrder.PickupAddress,
                DeliveryAddress = selectedOrder.DeliveryAddress,
                Status = selectedOrder.Status
                // other fields
            };
            BuildOrderFields(editableOrder);

            isEditMode = true;
            isEditModalOpen = true;
        }
    }

    private void CloseModal()
    {
        isEditModalOpen = false;
        selectedOrder = null;
    }

    private void OpenEditModal(Order order)
    {
        selectedOrder = order;
        editableOrder = new Order
        {
            ID = order.ID,
            PickupAddress = order.PickupAddress,
            DeliveryAddress = order.DeliveryAddress,
            Status = order.Status,
            // Add other properties you want editable
        };
        BuildOrderFields(editableOrder);

        isEditModalOpen = true;
    }

    private async Task SaveChanges()
    {
        if (selectedOrder == null || editableOrder == null)
        return;

        bool updated = false;

        if (editableOrder.PickupAddress != selectedOrder.PickupAddress)
            await OrderService.UpdateOrder(selectedOrder.ID, "PickupLocation", editableOrder.PickupAddress);
            updated = true;

        if (editableOrder.DeliveryAddress != selectedOrder.DeliveryAddress)
            await OrderService.UpdateOrder(selectedOrder.ID, "DeliveryLocation", editableOrder.DeliveryAddress);
            updated = true;

        if (editableOrder.Status != selectedOrder.Status)
            await OrderService.UpdateOrder(selectedOrder.ID, "OrderStatus", editableOrder.Status);
            updated = true;

        if (updated)
        {
            var result = await OrderService.GetAllOrders();
            if (result.Success && result.Data != null)
            {
                orders = result.Data;
                ToastService.ShowToast("Order updated successfully", ToastService.ToastLevel.Success);
            }
            else
            {
                ToastService.ShowToast("Failed to update order.", ToastService.ToastLevel.Error);
            }
        }
        else
        {
            ToastService.ShowToast("No changes were made", ToastService.ToastLevel.Warning);
        }

        CloseModal();
    }

    private void ConfirmDelete(Guid id)
    {
        orderToDeleteId = id;
        isDeleteModalOpen = true;   
    }

    private void CancelDelete()
    {
        isDeleteModalOpen = false;
        orderToDeleteId = Guid.Empty;
    }

    private async Task DeleteOrder()
    {
        if (orderToDeleteId != Guid.Empty)
        {
            bool success = await OrderService.DeleteOrder(orderToDeleteId);

            if (success)
            {
                var result = await OrderService.GetAllOrders();
                if (result.Success && result.Data != null)
                {
                    orders = result.Data;
                    ToastService.ShowToast("Order deleted successfully", ToastService.ToastLevel.Success);
                }
            }
            else
            {
                ToastService.ShowToast("Failed to delete order", ToastService.ToastLevel.Error);
            }
        }

        isDeleteModalOpen = false;
        orderToDeleteId = Guid.Empty;
    }

    @* private void ApplyFilters()
    {
        IEnumerable<Order> filtered = orders;
    } *@


    private string GetStatusClass(string status) => status.ToLower() switch
    {
        "pending" => "text-yellow-600 bg-yellow-100 px-2 py-1 rounded text-xs font-medium",
        "completed" => "text-green-600 bg-green-100 px-2 py-1 rounded text-xs font-medium",
        "cancelled" => "text-red-600 bg-red-100 px-2 py-1 rounded text-xs font-medium",
        _ => "text-gray-600 bg-gray-100 px-2 py-1 rounded text-xs font-medium"
    };
}
