@page "/admin/createinventory"
@layout MainLayout
@using System.Text.RegularExpressions
@using logistics_frontend.Models.Inventory
@using System.Text.Json
@using logistics_frontend.Models.Errors
@inject InventoryService InventoryService
@inject NavigationManager Navigation
@attribute [Authorize(Roles = "admin")]

<h3>Create New Inventory</h3>

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success">
        @successMessage
    </div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">
        @errorMessage
    </div>
}

@if (!IsInitialized)
{
    <p><em>Loading user session...</em></p>
    return;
}

<EditForm Model="@formModel" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row">
        <!-- Left Column-->
        <div class="col-md-6">
            <div class="form-group mb-3">
                <label>Name</label>
                <InputText class="form-control" @bind-Value="@formModel.Name" />
            </div>

            <div class="form-group mb-3">
                <label>Category</label>
                <InputText class="form-control" @bind-Value="@formModel.Category" />
            </div>

            <div class="form-group mb-3">
                <label>Stock</label>
                <InputNumber class="form-control" @bind-Value="@formModel.Stock" />
            </div>

            <div class="form-group mb-3">
                <label>Price</label>
                <InputNumber class="form-control" @bind-Value="@formModel.Price" />
            </div>

            <div class="form-group mb-3">
                <label>Unit</label>
                <InputText class="form-control" @bind-Value="@formModel.Unit" />
            </div>
        </div>

        <!-- Right Column-->
        <div class="col-md-6">
            <div class="form-group mb-3">
                <label>Packaging</label>
                <InputText class="form-control" @bind-Value="@formModel.Packaging" />
            </div>

            <div class="form-group mb-3">
                <label>Location</label>
                <InputText class="form-control" @bind-Value="@formModel.Location" />
            </div>
        </div>
    </div>

    <!-- Description (full width) -->
    <div class="form-group mb-3">
        <label>Description</label>
        <InputTextArea class="form-control" @bind-Value="formModel.Description" rows="3" />
    </div>

    <!-- Image Breakdown Placeholder -->
    <div class="form-group mb-3">
        <label>Images</label>
        <InputFile OnChange="HandleImageSelected" multiple/>
        <small class="form-text text-muted">Please upload one or more images.</small>

        <div class="mt-2">
            @foreach (var preview in imagePreviews)
            {
                <img src="@preview" style="max-width: 100px; margin: 5px;"/>
            }
        </div>
    </div>
    
    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

@code {
    private string AdminIdText { get; set; } = string.Empty;
    private CreateInventoryRequest formModel = new();
    private string? successMessage { get; set; }
    private string? errorMessage { get; set; }
    private List<IBrowserFile> selectedFiles = new();
    private List<string> imagePreviews = new();
    private class ErrorResponse {
        public string? Error { get; set; }
    }
    [Inject] public UserSessionService SessionService { get; set; } = default!;
    private Guid? cachedUserId;
    private string? cachedUserName;
    private bool IsInitialized = false;
    
    protected override async Task OnInitializedAsync()
    {
        var user = await SessionService.GetUserAsync();
        if (user != null)
        {
            cachedUserId = user.ID;
            cachedUserName = user.FullName;
            return; 
        }

        IsInitialized = true;
    }

    private async Task HandleValidSubmit()
    {
        errorMessage = null;
        successMessage = null;

        if (!IsInitialized || !cachedUserId.HasValue || cachedUserId == Guid.Empty || string.IsNullOrWhiteSpace(cachedUserName))
        {
            errorMessage = "User session not ready. Please refresh the page.";
            return;
        }

        if(imagePreviews.Count == 0)
        {
            errorMessage = "Please upload at least one image.";
            return;
        }

        @* if (!Guid.TryParse(UserId, out var adminId))
        {
            errorMessage = "Invalid Admin ID.";
            return;
        } *@

        var slug = GenerateSlug(cachedUserName, formModel.Name);

        var formData = new CreateInventoryRequest{
            AdminID = cachedUserId.Value,
            Name = formModel.Name,
            Category = formModel.Category,
            Stock = formModel.Stock,
            Price = formModel.Price,
            Unit = formModel.Unit,
            Packaging = formModel.Packaging,
            Location = formModel.Location,
            Description = formModel.Description,
            Slug = slug,
            Images = string.Join(";", imagePreviews) // or some consistent string format
        };

        var res = await InventoryService.AddInventory(formData);

        if (res.Success)
        {
            successMessage = "Inventory created successfully.";
            await ClearMessageAfterDelay();
            Navigation.NavigateTo("/admin/inventories");
        }
        else
        {
            errorMessage = res.ErrorMessage ?? "An unexpected error occurred.";
            await ClearMessageAfterDelay();
        }       
    }

    private async Task HandleImageSelected (InputFileChangeEventArgs e)
    {
        selectedFiles.Clear();
        imagePreviews.Clear();

        foreach (var file in e.GetMultipleFiles())
        {
            selectedFiles.Add(file);

            var buffer = new byte[file.Size];
            await file.OpenReadStream(5_000_000).ReadAsync(buffer); // 5 mb limit
            var base64 = Convert.ToBase64String(buffer);
            imagePreviews.Add($"data:{file.ContentType};base64,{base64}");
        }
    }

    private string GenerateSlug(string userName, string productName)
    {
        if (string.IsNullOrWhiteSpace(userName) || string.IsNullOrWhiteSpace(productName))
        return "";

        string raw = $"{userName}-{productName}".ToLowerInvariant();

        // Replace '&' and remove apostrophes
        raw = raw.Replace("&", "and").Replace("'", "");

        // Replace any non-alphanumerics with hyphens
        raw = Regex.Replace(raw, @"[^a-z0-9]+", "-");

        // Trim multiple or trailing hyphens
        raw = Regex.Replace(raw, @"-+", "-").Trim('-');

        return raw;
    }

    private async Task ClearMessageAfterDelay()
    {
        await Task.Delay(4000);
        successMessage = null;
        errorMessage = null;
        StateHasChanged();
    }
}

