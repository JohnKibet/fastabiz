@page "/auth/reset-password"
@using System.ComponentModel.DataAnnotations
@layout PublicLayout
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>ðŸ”’ Reset Password</h3>

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-info">@message</div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

<EditForm Model="@model" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <input type="hidden" @bind="model.Token" />

    <div class="mb-3">
        <label>New Password</label>
        <InputText @bind-Value="model.NewPassword" type="password" class="form-control" />
        <ValidationMessage For="@(() => model.NewPassword)" />
    </div>

    <div class="mb-3">
        <label>Confirm Password</label>
        <InputText @bind-Value="model.ConfirmPassword" type="password" class="form-control" />
        <ValidationMessage For="@(() => model.ConfirmPassword)" />
    </div>

    <button class="btn btn-primary">Reset Password</button>
</EditForm>

@code {
    private ResetPasswordModel model = new();
    private string? message;
    private string? errorMessage;

    protected override void OnInitialized()
    {
        var uri = new Uri(Navigation.Uri);
        var queryParams = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
        if (queryParams.TryGetValue("token", out var token))
        {
            model.Token = token;
        }
        else
        {
            errorMessage = "Missing reset token.";
        }
    }

    private async Task HandleSubmit()
    {
        if (model.NewPassword != model.ConfirmPassword)
        {
            errorMessage = "Passwords do not match.";
            return;
        }

        var response = await Http.PostAsJsonAsync("auth/reset-password", model);
        if (response.IsSuccessStatusCode)
        {
            message = "Password has been reset. You can now log in.";
        }
        else
        {
            errorMessage = "Reset failed. Please try again.";
        }
    }

    public class ResetPasswordModel
    {
        [Required]
        public string Token { get; set; } = "";

        [Required]
        [MinLength(6)]
        public string NewPassword { get; set; } = "";

        [Required]
        public string ConfirmPassword { get; set; } = "";
    }
}
