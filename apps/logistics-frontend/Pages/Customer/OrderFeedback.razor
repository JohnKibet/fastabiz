@page "/customer/feedback"
@layout MainLayout
@using logistics_frontend.Models.Feedback
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Navigation
@inject FeedbackService FeedbackService
@attribute [Authorize(Roles = "customer")]

<div class="max-w-2xl mx-auto">
    <!-- Page Heading -->
    <h2 class="text-2xl font-semibold text-gray-800 mb-6 flex items-center gap-2">
        ⭐ Rate Your Delivery
    </h2>

    <!-- Feedback Card -->
    <div class="bg-white shadow-sm rounded-xl border p-6">
        <EditForm Model="@feedback" OnValidSubmit="HandleValidSubmit">
            <div class="space-y-4">
                <!-- Order ID -->
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Order ID</label>
                    <input 
                        @bind="OrderIdText"
                        type="text"
                        placeholder="e.g., ORD101"
                        class="w-full px-3 py-2 border rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-orange-500 text-sm"
                    />
                </div>

                <!-- Feedback -->
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Feedback</label>
                    <textarea 
                        @bind="feedback.Comment"
                        placeholder="Leave your comment here..."
                        rows="4"
                        class="w-full px-3 py-2 border rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-orange-500 text-sm"
                    ></textarea>
                </div>

                <!-- Submit -->
                <button 
                    type="submit"
                    class="w-full bg-orange-500 hover:bg-orange-600 text-white font-medium py-2 px-4 rounded-lg shadow-sm transition">
                    Submit Feedback
                </button>
            </div>
        </EditForm>

        <!-- Messages -->
        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="mt-4 text-green-600 bg-green-50 border border-green-200 rounded-lg p-3 text-sm">
                ✅ @successMessage
            </div>
        }
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="mt-4 text-red-600 bg-red-50 border border-red-200 rounded-lg p-3 text-sm">
                ⚠️ @errorMessage
            </div>
        }
    </div>
</div>

@code {
    private string OrderIdText { get; set; } = string.Empty;
    private CreateFeedbackRequest feedback = new();
    private string? successMessage { get; set; }
    private string? errorMessage { get; set; }

    public async Task HandleValidSubmit()
    {
        if (Guid.TryParse(OrderIdText, out var parsedId))
        {
            try
            {
                feedback.OrderID = parsedId;
                await FeedbackService.CreateFeedback(feedback);

                successMessage = "Feedback successfully sent!";
                await ClearMessageAfterDelay();

                Navigation.NavigateTo("/customer/myorders");
            }
            catch (Exception ex)
            {
                errorMessage = $"Failed to create feedback: {ex.Message}";
                await ClearMessageAfterDelay();
            }
        }
        else
        {
            errorMessage = "Invalid Order ID format.";
            await ClearMessageAfterDelay();
        }
    }

    private async Task ClearMessageAfterDelay()
    {
        await Task.Delay(4000);
        successMessage = null;
        errorMessage = null;
        StateHasChanged();
    }
}
