@using logistics_frontend.Models.Order
@inject OrderService OrderService
@inject NavigationManager Navigation
@inject ToastService ToastService
@inject AuthenticationStateProvider AuthProvider

<EditForm Model="@order" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />

    <div class="bg-white rounded-xl shadow p-6 max-w-xl mx-auto space-y-6">
        <h3 class="text-2xl font-semibold text-gray-800">Create New Order</h3>

        <div class="space-y-4">
            <div class="flex flex-row justify-between">
                <InputField 
                    Label="Pickup Location"
                    Value="@order.PickupLocation"
                    ValueChanged="@((val) => order.PickupLocation = val)"
                    ValueExpression="@(() => order.PickupLocation)"
                    Placeholder="e.g., Warehouse A" 
                />

                <InputField 
                    Label="Delivery Location" 
                    Value="@order.DeliveryLocation"
                    ValueChanged="@((val) => order.DeliveryLocation = val)"
                    ValueExpression="@(() => order.DeliveryLocation)"
                    Placeholder="e.g., Customer Address" 
                />
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Customers</label>
                <GenericDropdown TItem="Customer"
                    Items="@customers"
                    GetValue="c => c.ID"
                    GetLabel="c => c.Name"
                    SelectedId="@order.CustomerID"
                    SelectedIdChanged="@((id) => order.CustomerID = id)"
                    Placeholder="Select Customer" 
                />
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Inventories</label>
                <GenericDropdown TItem="AllInventory"
                    Items="@inventories"
                    GetValue="i => i.ID"
                    GetLabel="i => i.Name"
                    SelectedId="@order.InventoryID"
                    SelectedIdChanged="@((id) => order.InventoryID = id)"
                    Placeholder="Select Inventory" 
                />
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Quantity</label>
                <InputNumber @bind-Value="order.Quantity"
                    min="1"
                    class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm text-gray-800" 
                />

                <ValidationMessage For="@(() => order.Quantity)" class="text-sm text-red-600 mt-1" />
            </div>

        </div>

        <div class="flex flex-row space-x-12">
            <button type="submit" class="w-full bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-4 rounded-lg transition duration-200" disabled="@isSubmitting">
                @(isSubmitting ? "Creating..." : "Create Order")
            </button>

            <button 
                class="w-full bg-gray-500 hover:bg-gray-700 text-white font-semibold py-2 px-4 rounded-lg transition duration-200"
                @onclick="ClearForm"
            >
                Cancel
            </button>
        </div>
    </div>
</EditForm>


@code {
    private CreateOrderRequest order = new();
    private List<Customer> customers = new();
    private List<AllInventory> inventories = new();
    [Inject] private DropdownDataService DropdownService { get; set; } = default!;

    private bool isSubmitting = false;

    protected override async Task OnInitializedAsync()
    {
        await DropdownService.LoadCachedDropdownData();
        customers = DropdownService.Customers;
        inventories = DropdownService.Inventories;
    }

    private async Task HandleValidSubmit()
    {
        // Basic null/empty validation
        if (order.CustomerID == Guid.Empty)
        {
            ToastService.ShowToast("Please select a customer.", ToastService.ToastLevel.Warning);
            return;
        }

        if (order.InventoryID == Guid.Empty)
        {
            ToastService.ShowToast("Please select an inventory item.", ToastService.ToastLevel.Warning);
            return;
        }

        if (string.IsNullOrWhiteSpace(order.PickupLocation) ||
            string.IsNullOrWhiteSpace(order.DeliveryLocation))
        {
            ToastService.ShowToast("Pickup and delivery locations are required.", ToastService.ToastLevel.Warning);
            return;
        }

        if (order.Quantity <= 0)
        {
            ToastService.ShowToast("Quantity must be at least 1.", ToastService.ToastLevel.Warning);
            return;
        }

        try
        {
            isSubmitting = true;
            await OrderService.AddOrder(order);

            ToastService.ShowToast("Order successfully created!", ToastService.ToastLevel.Success);
            Navigation.NavigateTo("/orders");
        }
        catch (Exception ex)
        {
            ToastService.ShowToast($"Failed to create order: {ex.Message}", ToastService.ToastLevel.Error);
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void ClearForm()
    {
        order = new();
    }

}
