@inject ToastService ToastService

<div class="fixed top-16 right-10 z-50 space-y-2">
    @foreach (var toast in toasts)
    {
        <div class="@GetToastCss(toast.Level)">
            <div class="flex justify-between items-center">
                <span>@toast.Message</span>
                <button class="ml-4 text-gray-500 hover:text-black transition" @onclick="@(() => RemoveToast(toast))" aria-label="Close toast">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M18 6L6 18M6 6l12 12" />
                    </svg>
                </button>
            </div>
        </div>
    }
</div>

@code {
    private List<ToastMessage> toasts = new();

    protected override void OnInitialized()
    {
        ToastService.OnShow += ShowToast;
    }

    private void ShowToast(string message, ToastService.ToastLevel level)
    {
        var toast = new ToastMessage { Message = message, Level = level };
        toasts.Add(toast);
        StateHasChanged();

        Task.Delay(4000).ContinueWith(_ =>
        {
            toasts.Remove(toast);
            InvokeAsync(StateHasChanged);
        });
    }

    private void RemoveToast(ToastMessage toast)
    {
        toasts.Remove(toast);
    }

    private string GetToastCss(ToastService.ToastLevel level)
    {
        return level switch
        {
            ToastService.ToastLevel.Success => "bg-green-100 text-green-800 p-4 rounded shadow",
            ToastService.ToastLevel.Error => "bg-red-100 text-red-800 p-4 rounded shadow",
            ToastService.ToastLevel.Warning => "bg-yellow-100 text-yellow-800 p-4 rounded shadow",
            _ => "bg-blue-100 text-blue-800 p-4 rounded shadow",
        };
    }

    private class ToastMessage
    {
        public string Message { get; set; } = string.Empty;
        public ToastService.ToastLevel Level { get; set; }
    }
}
