@using logistics_frontend.Models.Inventory
@inject InventoryService InventoryService
@inject ToastService ToastService
@inject NavigationManager Navigation
@inject UserSessionService SessionService

<EditForm Model="@inventory" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />

    <div class="bg-white rounded-xl shadow p-6 max-w-3xl mx-auto space-y-6">
        <h3 class="text-2xl font-semibold text-gray-800">Create New Inventory</h3>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <InputField Label="Name" 
                        Value="@inventory.Name" 
                        ValueChanged="val => inventory.Name = val"
                        ValueExpression="@(() => inventory.Name)"
                        Placeholder="e.g., Organic Fertilizer" />

            <InputField Label="Category"
                        Value="@inventory.Category"
                        ValueChanged="val => inventory.Category = val"
                        ValueExpression="@(() => inventory.Category)"
                        Placeholder="e.g., Manure & Fertilizer" />

            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Stock</label>
                <InputNumber @bind-Value="inventory.Stock" min="1" 
                             class="w-full px-3 py-2 border rounded-md focus:ring-2 focus:ring-blue-500" />
                <small class="text-gray-500">Preview: @StockPreview</small>
                <ValidationMessage For="@(() => inventory.Stock)" class="text-red-600 text-sm" />
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Price (KES)</label>
                <InputNumber @bind-Value="inventory.Price" step="0.01" min="0"
                             class="w-full px-3 py-2 border rounded-md focus:ring-2 focus:ring-blue-500" />
                <ValidationMessage For="@(() => inventory.Price)" class="text-red-600 text-sm" />
            </div>

            <!-- Unit Dropdown -->
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Unit</label>
                <select class="w-full px-3 py-2 border rounded-md focus:ring-2 focus:ring-blue-500"
                        @bind="selectedUnit">
                    @foreach (var u in commonUnits)
                    {
                        <option value="@u">@u</option>
                    }
                </select>
                @if (selectedUnit == "Other")
                {
                    <input type="text" @bind="customUnit" placeholder="Enter custom unit"
                           class="w-full mt-2 px-3 py-2 border rounded-md focus:ring-2 focus:ring-blue-500" />
                }
            </div>

            <!-- Packaging Dropdown -->
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Packaging</label>
                <select class="w-full px-3 py-2 border rounded-md focus:ring-2 focus:ring-blue-500"
                        @bind="selectedPackaging">
                    @foreach (var p in commonPackaging)
                    {
                        <option value="@p">@p</option>
                    }
                </select>
                @if (selectedPackaging == "Custom")
                {
                    <input type="text" @bind="customPackaging" placeholder="Enter custom packaging"
                           class="w-full mt-2 px-3 py-2 border rounded-md focus:ring-2 focus:ring-blue-500" />
                }
            </div>

            <InputField Label="Location"
                        Value="@inventory.Location"
                        ValueChanged="val => inventory.Location = val"
                        ValueExpression="@(() => inventory.Location)"
                        Placeholder="e.g., Longnet" />

        </div>

        <!-- Description -->
        <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Description</label>
            <InputTextArea @bind-Value="inventory.Description" rows="3"
                           class="w-full px-3 py-2 border rounded-md focus:ring-2 focus:ring-blue-500" />
            <ValidationMessage For="@(() => inventory.Description)" class="text-red-600 text-sm" />
        </div>

        <!-- Images -->
        <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Images</label>
            <InputFile OnChange="HandleImageSelected" multiple />
            <div class="flex gap-2 mt-2 flex-wrap">
                @foreach (var preview in imagePreviews)
                {
                    <img src="@preview" class="h-20 w-20 object-cover rounded border" />
                }
            </div>
        </div>

        <!-- Actions -->
        <div class="flex gap-4">
            <button type="submit" class="flex-1 bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-4 rounded-lg transition"
                    disabled="@isSubmitting">
                @(isSubmitting ? "Creating..." : "Create Inventory")
            </button>
            <button type="button" @onclick="ClearForm"
                    class="flex-1 bg-gray-500 hover:bg-gray-700 text-white font-semibold py-2 px-4 rounded-lg transition">
                Cancel
            </button>
        </div>
    </div>
</EditForm>

@code {
    private CreateInventoryRequest inventory = new();
    private bool isSubmitting = false;
    private List<string> imagePreviews = new();
    private List<IBrowserFile> selectedFiles = new();

    private string selectedUnit = "kilos";
    private string? customUnit;
    private string selectedPackaging = "70kg sack bag";
    private string? customPackaging;

    private List<string> commonUnits = new() { "litres", "kilos", "grams", "pieces", "per bag", "per bucket", "Other" };
    private List<string> commonPackaging = new() { "single bottle", "carton of 12", "70kg sack bag", "5L jerrycan", "Custom" };

    private string StockPreview => $"{inventory.Stock} {(string.IsNullOrWhiteSpace(selectedPackaging) ? selectedUnit : selectedPackaging)}";

    protected override async Task OnInitializedAsync()
    {
        var user = await SessionService.GetUserAsync();
        if (user != null)
        {
            inventory.AdminID = user.ID;
        }
    }

    private async Task HandleValidSubmit()
    {
        inventory.Unit = selectedUnit == "Other" ? customUnit ?? "" : selectedUnit;
        inventory.Packaging = selectedPackaging == "Custom" ? customPackaging ?? "" : selectedPackaging;

        if (imagePreviews.Count == 0)
        {
            ToastService.ShowToast("Please upload at least one image.", ToastService.ToastLevel.Warning);
            return;
        }

        try
        {
            isSubmitting = true;
            inventory.Images = string.Join(";", imagePreviews);
            var res = await InventoryService.AddInventory(inventory);

            if (res.Success)
            {
                ToastService.ShowToast("Inventory created successfully.", ToastService.ToastLevel.Success);
                Navigation.NavigateTo("/admin/inventories");
            }
            else
            {
                ToastService.ShowToast(res.ErrorMessage ?? "Failed to create inventory.", ToastService.ToastLevel.Error);
            }
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private async Task HandleImageSelected(InputFileChangeEventArgs e)
    {
        selectedFiles.Clear();
        imagePreviews.Clear();
        foreach (var file in e.GetMultipleFiles())
        {
            selectedFiles.Add(file);
            var buffer = new byte[file.Size];
            await file.OpenReadStream(5_000_000).ReadAsync(buffer);
            var base64 = Convert.ToBase64String(buffer);
            imagePreviews.Add($"data:{file.ContentType};base64,{base64}");
        }
    }

    private void ClearForm()
    {
        inventory = new CreateInventoryRequest();
        selectedUnit = "kilos";
        selectedPackaging = "70kg sack bag";
        customUnit = null;
        customPackaging = null;
        imagePreviews.Clear();
    }
}
