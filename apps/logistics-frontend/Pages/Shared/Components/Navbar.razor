@using logistics_frontend.Services.CustomAuthStateProvider
@using Microsoft.AspNetCore.Components.Routing
@inject CustomAuthStateProvider AuthProvider
@using logistics_frontend.Models.Notification
@inject NavigationManager Navigation

<nav class="w-full bg-white shadow-md px-6 py-3 flex items-center justify-between max-w-7xl mx-auto">
  <!-- Global Search -->
<div class="relative w-72">
    <input
        type="text"
        placeholder="Search tools, pages, or settings..."
        class="w-full pl-10 pr-3 py-2 text-sm border rounded-lg focus:outline-none focus:ring-2 focus:ring-stoneblue/50 focus:border-stoneblue text-gray-700 placeholder-gray-400"
        @bind="SearchQuery"
        @bind:event="oninput"
        @onfocus="ShowResults"
        @onblur="HideResults"
    />
    <svg xmlns="http://www.w3.org/2000/svg" class="absolute left-3 top-2.5 h-4 w-4 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
        <path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-4.35-4.35m0 0A7.5 7.5 0 1 0 9.75 17.25a7.5 7.5 0 0 0 6.9-3.9z" />
    </svg>

</div>

  <!-- Right section (User + Actions) -->
  <div class="flex items-center space-x-4">
      <!-- Notifications Dropdown -->
      <NotificationDropdown />

      <!-- User avatar & name -->
      <div class="relative">
          <button class="flex items-center space-x-2 focus:outline-none" @onclick="ToggleUserDropdown">
              <img src="https://ui-avatars.com/api/?name=@UserName&background=FFA500&color=fff" 
                  alt="User Avatar" 
                  class="w-8 h-8 rounded-full shadow-md" />
              <span class="text-sm font-medium font-poppins text-gray-800">@UserName</span>
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-gray-500" fill="none" 
                  viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                  <path stroke-linecap="round" stroke-linejoin="round" d="M19 9l-7 7-7-7" />
              </svg>
          </button>

          @if (showUserDropdown)
          {
            <div class="absolute right-0 mt-2 w-48 bg-white rounded-xl shadow-lg border p-2 z-50">
              <NavLink 
                href="/admin/profile" 
                class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded-md">
                  View Profile
              </NavLink>
              <NavLink 
                href="/admin/settings" 
                class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded-md">
                  Settings
              </NavLink>

              <!-- Logout Button -->
              <button class="w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-red-50 rounded-md"
                @onclick="Logout">
                  Logout
              </button>
            </div>
          }
      </div>
  </div>
</nav>

@code {
  [Parameter] 
  public string? UserName { get; set; }
  private bool showUserDropdown = false;
  private string SearchQuery { get; set; } = string.Empty;
  private bool ShowDropdown { get; set; } = false;

  protected override void OnInitialized()
  {
    Navigation.LocationChanged += HandleLocationChanged;
  }

  // Combine quick actions + sidebar-like items
  private List<SearchItem> SearchItems = new()
  {
    new("Dashboard", "/admin/dashboard", "layout-dashboard"),
    new("Orders", "/admin/orders", "file-stack"),
    new("Create Order", "/admin/createorder", "file-plus"),
    new("Inventories", "/admin/inventories", "box-open"),
    new("Create Inventory", "/admin/createinventory", "folder-plus"),
    new("Users", "/admin/users", "users"),
    new("Settings", "/admin/settings", "settings"),
    new("Notifications", "/admin/notifications", "bell"),
    new("Profile", "/admin/profile", "user"),
    new("Map", "/admin/map", "map")
  };

  private IEnumerable<SearchItem> FilteredResults =>
    string.IsNullOrWhiteSpace(SearchQuery)
      ? Enumerable.Empty<SearchItem>()
      : SearchItems
        .Where(x => x.Title.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase))
        .Take(8);

  private void ShowResults() => ShowDropdown = true;
  private async void HideResults()
  {
    await Task.Delay(150);
    ShowDropdown = false;
  }

  private void NavigateTo(string url)
  {
    Navigation.NavigateTo(url);
    SearchQuery = "";
    ShowDropdown = false;
  }

  private void ToggleUserDropdown() => showUserDropdown = !showUserDropdown;

  private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
  {
    showUserDropdown = false;
    ShowDropdown = false;
    StateHasChanged();
  }

  private async Task Logout()
  {
    await AuthProvider.SignOutAsync();
    Navigation.NavigateTo("/auth/login");
  }

  private record SearchItem(string Title, string Link, string Icon);
}
