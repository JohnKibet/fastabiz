@typeparam TValue
@using System.Linq.Expressions
@namespace logistics_frontend.Pages.Shared.Components.InputField

<div class="form-group">
    <label class="block text-sm font-medium text-gray-700">@Label</label>


    @if (typeof(TValue) == typeof(string))
    {
        <InputText
            class="form-control w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm 
                    focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 
                    text-sm text-gray-800"
            Value="@(Value as string)"
            ValueChanged="EventCallback.Factory.Create<string?>(this, v => ValueChanged.InvokeAsync((TValue?)(object?)v))"
            ValueExpression="@(ValueExpression as Expression<Func<string?>>)"
            Placeholder="@Placeholder"
        />
    }
    else if (typeof(TValue) == typeof(int) || typeof(TValue) == typeof(decimal) || typeof(TValue) == typeof(double) || typeof(TValue) == typeof(long))
    {
        <InputNumber TValue="TValue"
            class="form-control w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm 
                   focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 
                   text-sm text-gray-800"
            Value="@Value"
            ValueChanged="ValueChanged"
            ValueExpression="ValueExpression"
            Placeholder="@Placeholder"
        />
    }
    
    <ValidationMessage For="ValueExpression" class="text-red-600 text-sm mt-1" />
</div>

@code {
    [Parameter] public string Label { get; set; } = string.Empty;
    [Parameter] public string? Placeholder { get; set; }

    [Parameter] public TValue? Value { get; set; }
    [Parameter] public EventCallback<TValue?> ValueChanged { get; set; }

    [Parameter] public Expression<Func<TValue?>>? ValueExpression { get; set; }
}