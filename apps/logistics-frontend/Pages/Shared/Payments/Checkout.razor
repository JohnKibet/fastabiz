@page "/payments/{OrderId:guid}"
@using System.ComponentModel.DataAnnotations
@using logistics_frontend.Models.Payment
@inject PaymentService PaymentService
@inject NavigationManager Navigation

<h3>💳 Accept a Payment</h3>

<div class="toast-container position-fixed bottom-0 end-0 p-3">
    <div class="toast align-items-center text-white @toastBgClass show" role="alert">
        <div class="d-flex">
            <div class="toast-body">
                @toastMessage
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" @onclick="HideToast"></button>
        </div>
    </div>
</div>


<EditForm Model="@formModel" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <!-- Payment Method -->
    <div class="mb-3">
        <label for="method">Payment Method</label>
        <InputSelect id="method" @bind-Value="formModel.Method" class="form-select">
            <option value="">-- Select Payment Method --</option>
            @foreach (var method in paymentMethods)
            {
                <option value="@method">@method</option>
            }
        </InputSelect>
    </div>

    <!-- Dynamic Extras -->
    @if (fieldMappings.TryGetValue(formModel.Method, out var fields))
    {
        foreach (var field in fields)
        {
            <div class="mb-3">
                <label>@fieldLabels[field]</label>
                <InputText class="form-control" @bind-Value="formExtras[field]" />
                @if (validationErrors.TryGetValue(field, out var error))
                {
                    <div class="text-danger">@error</div>
                }
            </div>
        }
    }

    <!-- Amount -->
    <div class="mb-3">
        <label>Amount</label>
        <InputNumber @bind-Value="formModel.Amount" class="form-control" />
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

@code {
    [Parameter] public Guid OrderId { get; set; }

    private PaymentFormModel formModel = new();
    private Dictionary<string, string?> formExtras = new();
    private Dictionary<string, string> validationErrors = new();
    private string toastMessage = string.Empty;
    private string toastBgClass = "bg-success"; // or "bg-danger"
    private bool showToast = false;

    private List<string> paymentMethods = new()
    {
        "mobile_money", "stripe", "paypal", "cash_on_delivery"
    };

    private Dictionary<string, List<string>> fieldMappings = new()
    {
        { "mobile_money", new() { "PhoneNumber" } },
        { "stripe", new() { "CardNumber", "ExpiryDate", "CVV" } },
        { "paypal", new() { "Email" } },
        { "cash_on_delivery", new() { "DeliveryNote" } }
    };

    private Dictionary<string, string> fieldLabels = new()
    {
        { "PhoneNumber", "Phone Number" },
        { "CardNumber", "Card Number" },
        { "ExpiryDate", "Expiry Date (MM/YY)" },
        { "CVV", "CVV" },
        { "Email", "PayPal Email" },
        { "DeliveryNote", "Delivery Note" }
    };

    protected override void OnInitialized()
    {
        formModel.OrderID = OrderId;
    }

    private bool ValidateExtras()
    {
        validationErrors.Clear();

        if (fieldMappings.TryGetValue(formModel.Method, out var fields))
        {
            foreach (var field in fields)
            {
                if (string.IsNullOrWhiteSpace(formExtras.GetValueOrDefault(field)))
                {
                    validationErrors[field] = $"{fieldLabels[field]} is required.";
                }
            }
        }

        return validationErrors.Count == 0;
    }

    private async Task HandleSubmit()
    {
        try
        {
            var request = new PaymentRequest
            {
                OrderID = formModel.OrderID,
                Amount = formModel.Amount,
                Method = formModel.Method
            };

            await PaymentService.MakePayment(request);
            ShowToast("✅ Payment successful!");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Payment failed: {ex.Message}");
            ShowToast("❌ Payment failed. Please try again.", true);
        }
    }

    public class PaymentFormModel
    {
        public Guid OrderID { get; set; }

        [Required(ErrorMessage = "Payment method is required.")]
        public string Method { get; set; } = "";

        [Required(ErrorMessage = "Amount is required.")]
        [Range(0.01, double.MaxValue, ErrorMessage = "Amount must be greater than zero.")]
        public double Amount { get; set; }
    }

    private void ShowToast(string message, bool isError = false)
    {
        toastMessage = message;
        toastBgClass = isError ? "bg-danger" : "bg-success";
        showToast = true;
        StateHasChanged();

        // Auto-hide after 3 seconds
        _ = Task.Delay(3000).ContinueWith(_ =>
        {
            showToast = false;
            InvokeAsync(StateHasChanged);
        });
    }

    private void HideToast()
    {
        showToast = false;
    }
}
