@page "/payments/history"
@using logistics_frontend.Models.Payment
@inject PaymentService PaymentService

<h3>📋 Payment History</h3>

@if (isLoading)
{
    <p>Loading payments...</p>
}
else if (payments.Count == 0)
{
    <p>No payments found.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Order ID</th>
                <th>Amount</th>
                <th>Method</th>
                <th>Status</th>
                <th>Paid At</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var payment in payments)
            {
                <tr>
                    <td>@payment.OrderID</td>
                    <td>@payment.Amount.ToString("C")</td>
                    <td>@FormatMethod(payment.Method)</td>
                    <td>@FormatStatus(payment.Status)</td>
                    <td>@payment.PaidAt.ToString("g")</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Payment> payments = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            payments = await PaymentService.GetAllPayments();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to load payments: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private string FormatMethod(string method) => method switch
    {
        "mobile_money" => "Mobile Money",
        "stripe" => "Credit/Debit Card",
        "paypal" => "PayPal",
        "cash_on_delivery" => "Cash on Delivery",
        _ => method
    };

    private string FormatStatus(string status) => status switch
    {
        "pending" => "⏳ Pending",
        "completed" => "✅ Completed",
        "failed" => "❌ Failed",
        _ => status
    };
}
