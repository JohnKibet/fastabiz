@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using logistics_frontend.Services.CustomAuthStateProvider
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Navigation

<CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized>
            @if (IsReady)
            {
                <div class="layout-container @(IsSidebarCollapsed ? "sidebar-collapsed" : "")">
                    <SidebarComponent OnCollapseChanged="OnSidebarCollapseChanged"/>

                    <div class="main-content">
                        <header class="topbar">
                            <span>Hello, @UserName</span>
                            <a @onclick="HandleLogout" class="logout-link">Logout</a>
                        </header>

                        <main class="content">
                            @ChildContent
                        </main>

                        <footer class="footer">
                            <p>&copy; @DateTime.Now.Year Logistics System. All rights reserved.</p>
                        </footer>
                    </div>
                </div>
            }
            else
            {
                <p>Loading...</p>
            }
        </Authorized>
        <NotAuthorized>
            @*prevent the layout from triggering another redirect if you're already on the /auth/login page *@
            @if (RedirectToLogin && IsReady && !Navigation.Uri.Contains("/auth/login"))
            {
                Navigation.NavigateTo("/auth/login", forceLoad: true);
            }
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

<style>
    .layout-container {
        display: grid;
        grid-template-columns: var(--sidebar-width, 250px) 1fr;
        grid-template-rows: auto 1fr auto;
        min-height: 100vh;
        transition: grid-template-columns 0.3s ease;
        font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
    }

    .layout-container.sidebar-collapsed {
        --sidebar-width: 60px;
    }

    .sidebar {
        grid-row: 1 / span 3;
        background-color: #f8f9fa;
        padding: 1rem;
        border-right: 1px solid #ddd;
    }

    .main-content {
        display: flex;
        flex-direction: column;
        min-width: 0;
        background-color: #f4f6f8;
    }

    .topbar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        background-color: #ffffff;
        padding: 1rem 2rem;
        border-bottom: 1px solid #ddd;
        font-weight: bold;
    }

    .content {
        flex: 1;
        padding: 2rem;
        overflow: auto;
    }

    .footer {
        text-align: center;
        padding: 1rem;
        background-color: #ffffff;
        border-top: 1px solid #ddd;
    }

    .logout-link {
        cursor: pointer;
        color: #dc3545;
        text-decoration: none;
        margin-left: 1rem;
    }

    .logout-link:hover {
        text-decoration: underline;
    }
</style>

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public bool RedirectToLogin { get; set; } = true;
    private string? Role;
    private string? UserName;
    private bool IsReady;
    private bool IsSidebarCollapsed;
    private void OnSidebarCollapseChanged(bool isCollapsed)
    {
        IsSidebarCollapsed = isCollapsed;
    }

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthProvider.GetAuthenticationStateAsync();
        var user = state.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            Role = user.FindFirst(ClaimTypes.Role)?.Value;
            UserName = user.FindFirst(ClaimTypes.Name)?.Value;
        }

        IsReady = true;
        StateHasChanged();
    }

    private async Task HandleLogout()
    {
        if (AuthProvider is CustomAuthStateProvider customAuth)
        {
            await customAuth.SignOutAsync();
        }
    }
}
