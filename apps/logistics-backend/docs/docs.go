// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/deliveries/all_deliveries": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Get a list of all deliveries",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "deliveries"
                ],
                "summary": "List all deliveries",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/delivery.Delivery"
                            }
                        }
                    }
                }
            }
        },
        "/deliveries/by-id/{id}": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Retrieve a delivery by their ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "deliveries"
                ],
                "summary": "Get delivery by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Delivery ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/delivery.Delivery"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Delivery not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/deliveries/create": {
            "post": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Create a new delivery with order_id, driver_id, etc.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "deliveries"
                ],
                "summary": "Create a new delivery",
                "parameters": [
                    {
                        "description": "User Input",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/delivery.CreateDeliveryRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/delivery.Delivery"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to create delivery",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/deliveries/{id}": {
            "delete": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Permanently deletes a delivery by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "deliveries"
                ],
                "summary": "Delete a delivery",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Delivery ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Delivery deleted",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Delivery ID",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/deliveries/{id}/accept": {
            "put": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Updates delivery status to 'picked up' and sets the pickup timestamp. Only callable by authenticated drivers.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "deliveries"
                ],
                "summary": "Accept and mark delivery as picked up",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Delivery ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/delivery.Delivery"
                        }
                    },
                    "400": {
                        "description": "Missing or invalid delivery ID",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to accept delivery",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/deliveries/{id}/update": {
            "put": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Update any delivery struct field of an existing delivery",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "deliveries"
                ],
                "summary": "Update Delivery",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Delivery ID",
                        "name": "delivery_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Field and value to update",
                        "name": "update",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/delivery.UpdateDeliveryRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid delivery ID or request body",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/drivers/all_drivers": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Get a list of all registered drivers",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "drivers"
                ],
                "summary": "List all drivers",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/driver.Driver"
                            }
                        }
                    }
                }
            }
        },
        "/drivers/by-email/{email}": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Retrieve a driver by their Email",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "drivers"
                ],
                "summary": "Get driver by Email",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Driver Email",
                        "name": "email",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/driver.Driver"
                        }
                    },
                    "400": {
                        "description": "Invalid Email",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Driver not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/drivers/by-id/{id}": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Retrieve a driver by their ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "drivers"
                ],
                "summary": "Get driver by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Driver ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/driver.Driver"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Driver not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/drivers/create": {
            "post": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Register a new driver with name, email, etc.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "drivers"
                ],
                "summary": "Create a new driver",
                "parameters": [
                    {
                        "description": "User Input",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/driver.CreateDriverRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/driver.Driver"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to create driver",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/drivers/{id}": {
            "delete": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Permanently deletes a driver by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "drivers"
                ],
                "summary": "Delete a driver",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Driver ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Driver deleted",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid driver ID",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/drivers/{id}/profile": {
            "patch": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Updates the vehicle information and current location of a driver",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "drivers"
                ],
                "summary": "Update driver profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Driver ID",
                        "name": "driver_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Driver profile fields to update",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/driver.UpdateDriverRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/drivers/{id}/update": {
            "put": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Updates a driver's specific field (e.g., VehicleInfo, CurrentLocation) based on driver ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "drivers"
                ],
                "summary": "Update a specific driver field",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Driver ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Field and value to update",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/driver.UpdateDriverRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid driver ID or request body",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/feedbacks/all_feedbacks": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Get a list of all feedbacks",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "feedbacks"
                ],
                "summary": "List all feedbacks",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/feedback.Feedback"
                            }
                        }
                    }
                }
            }
        },
        "/feedbacks/create": {
            "post": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Create a new feedback with order_id, customer_id, etc.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "feedbacks"
                ],
                "summary": "Create a new feedback",
                "parameters": [
                    {
                        "description": "User Input",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/feedback.CreateFeedbackRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/feedback.Feedback"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to create feedback",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/feedbacks/{id}": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Retrieve a feedback by their ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "feedbacks"
                ],
                "summary": "Get feedback by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Feedback ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/feedback.Feedback"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Feedback not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/inventories/all_inventories": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "List all inventories with optional pagination",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inventories"
                ],
                "summary": "List all inventories",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit number of items",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset for pagination",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/inventory.Inventory"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/inventories/by-category": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Get all inventory items in a specific category",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inventories"
                ],
                "summary": "Get inventories by category",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Category Name",
                        "name": "category",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/inventory.Inventory"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Category",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/inventories/by-id": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Get a specific inventory item by UUID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inventories"
                ],
                "summary": "Get inventory by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Inventory ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/inventory.Inventory"
                        }
                    },
                    "400": {
                        "description": "Invalid inventory ID or request body",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/inventories/by-name": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Search inventory by item name (exact match)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inventories"
                ],
                "summary": "Get inventory by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Inventory Name",
                        "name": "name",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/inventory.Inventory"
                        }
                    },
                    "400": {
                        "description": "Invalid inventory ID or request body",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/inventories/categories": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Get all unique categories that belong to existing inventories",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inventories"
                ],
                "summary": "List all categories",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/inventories/create": {
            "post": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Creates an inventory and returns the created object",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inventories"
                ],
                "summary": "Create a new inventory",
                "parameters": [
                    {
                        "description": "Inventory input",
                        "name": "inventory",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/inventory.CreateInventoryRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/inventory.Inventory"
                        }
                    },
                    "400": {
                        "description": "Invalid inventory ID or request body",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/inventories/{id}": {
            "delete": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Permanently deletes an inventory by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inventories"
                ],
                "summary": "Delete an inventory",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Inventory ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Inventory deleted",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid inventory ID",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/notifications/all_notifications": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Get a list of all notifications",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifications"
                ],
                "summary": "List all notifications",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/notification.Notification"
                            }
                        }
                    }
                }
            }
        },
        "/notifications/create": {
            "post": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Create a new notification with user_id, message, etc.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifications"
                ],
                "summary": "Create a new notification",
                "parameters": [
                    {
                        "description": "User Input",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/notification.CreateNotificationRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/notification.Notification"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to create notification",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/notifications/{id}": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Retrieve a notification by their ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifications"
                ],
                "summary": "Get notification by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Notification ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/notification.Notification"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Notification not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/orders/all_orders": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Get a list of all orders",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "List all orders",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/order.Order"
                            }
                        }
                    }
                }
            }
        },
        "/orders/by-customer/{customer_id}": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Fetch order(s) using Customer ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Get order by Customer ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Customer ID",
                        "name": "customer_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/order.Order"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Customer ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/orders/by-id/{id}": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Fetch a single order using UUID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Get order by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/order.Order"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/orders/create": {
            "post": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Creates an order and returns the new object",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Create a new order",
                "parameters": [
                    {
                        "description": "Order input",
                        "name": "order",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/order.CreateOrderRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/order.Order"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/orders/{id}": {
            "delete": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Permanently deletes an order by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Delete a order",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order deleted",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid order ID",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/orders/{id}/update": {
            "put": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Update any order struct field of an existing order",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Update Order",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Order ID",
                        "name": "order_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Field and value to update",
                        "name": "update",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/order.UpdateOrderRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid order ID or request body",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/payments/all_payments": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Get a list of all payments",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "payments"
                ],
                "summary": "List all payments",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/payment.Payment"
                            }
                        }
                    }
                }
            }
        },
        "/payments/create": {
            "post": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Register new payment with order_id, amount, etc.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "payments"
                ],
                "summary": "Create new payment",
                "parameters": [
                    {
                        "description": "User Input",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/payment.CreatePaymentRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/payment.Payment"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to create payment",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/payments/{id}": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Fetch a single payment using payment ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "payments"
                ],
                "summary": "Get payment by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Payment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/payment.Payment"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/payments/{order_id}": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Fetch payment(s) using Order ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "payments"
                ],
                "summary": "Get payment by Order ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Order ID",
                        "name": "order_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/payment.Payment"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Order ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/public/create": {
            "post": {
                "description": "Register a new user with name, email, etc.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "public"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "User Input",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/user.User"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/public/login": {
            "post": {
                "description": "Authenticates a user using email and password and returns a JWT token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "public"
                ],
                "summary": "Login user",
                "parameters": [
                    {
                        "description": "User login credentials",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/public/store/{adminSlug}": {
            "get": {
                "description": "View all public products for an admin store by slug",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "public"
                ],
                "summary": "View public store page",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Admin Slug",
                        "name": "adminSlug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/inventory.StorePublicView"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/public/store/{adminSlug}/product/{productSlug}": {
            "get": {
                "description": "View a specific product by admin slug and product slug",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "public"
                ],
                "summary": "View public product page",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Admin Slug",
                        "name": "adminSlug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Product Slug",
                        "name": "productSlug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/inventory.Inventory"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/all_users": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Get a list of all registered users",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "List all users",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/user.User"
                            }
                        }
                    }
                }
            }
        },
        "/users/by-email/{email}": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Retrieve a user by their Email",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user by Email",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User Email",
                        "name": "email",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user.User"
                        }
                    },
                    "400": {
                        "description": "Invalid Email",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users/by-id/{id}": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Retrieve a user by their ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user.User"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "delete": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Permanently deletes a user by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Delete a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User profile deleted",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}/profile": {
            "patch": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Updates the phone number of a user (commonly used by a driver after initial registration)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update user phone number",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User phone update payload",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.UpdateDriverUserProfileRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Profile updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}/update": {
            "put": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Updates a user's specific field (e.g., FullName, Email) based on user ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update a specific user field",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Field and value to update",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid user ID or request body",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "delivery.CreateDeliveryRequest": {
            "type": "object",
            "properties": {
                "driver_id": {
                    "type": "string"
                },
                "order_id": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/delivery.DeliveryStatus"
                }
            }
        },
        "delivery.Delivery": {
            "type": "object",
            "properties": {
                "assigned_at": {
                    "type": "string"
                },
                "delivered_at": {
                    "type": "string"
                },
                "driver_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "order_id": {
                    "type": "string"
                },
                "picked_up_at": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/delivery.DeliveryStatus"
                }
            }
        },
        "delivery.DeliveryStatus": {
            "type": "string",
            "enum": [
                "assigned",
                "picked_up",
                "delivered",
                "failed"
            ],
            "x-enum-varnames": [
                "DeliveryAssigned",
                "DeliveryPickedUp",
                "DeliveryDelivered",
                "DeliveryFailed"
            ]
        },
        "delivery.UpdateDeliveryRequest": {
            "type": "object",
            "required": [
                "column",
                "value"
            ],
            "properties": {
                "column": {
                    "type": "string"
                },
                "value": {}
            }
        },
        "driver.CreateDriverRequest": {
            "type": "object",
            "required": [
                "current_location",
                "email",
                "full_name",
                "vehicle_info"
            ],
            "properties": {
                "current_location": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "vehicle_info": {
                    "type": "string"
                }
            }
        },
        "driver.Driver": {
            "type": "object",
            "properties": {
                "available": {
                    "type": "boolean"
                },
                "created_at": {
                    "type": "string"
                },
                "current_location": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "vehicle_info": {
                    "type": "string"
                }
            }
        },
        "driver.UpdateDriverRequest": {
            "type": "object",
            "required": [
                "column",
                "value"
            ],
            "properties": {
                "column": {
                    "type": "string"
                },
                "value": {}
            }
        },
        "feedback.CreateFeedbackRequest": {
            "type": "object",
            "properties": {
                "comments": {
                    "type": "string"
                },
                "customer_id": {
                    "type": "string"
                },
                "order_id": {
                    "type": "string"
                },
                "rating": {
                    "type": "integer"
                }
            }
        },
        "feedback.Feedback": {
            "type": "object",
            "properties": {
                "comments": {
                    "type": "string"
                },
                "customer_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "order_id": {
                    "type": "string"
                },
                "rating": {
                    "type": "integer"
                },
                "submitted_at": {
                    "type": "string"
                }
            }
        },
        "handlers.ErrorResponse": {
            "type": "object",
            "properties": {
                "detail": {
                    "description": "optional internal error",
                    "type": "string",
                    "example": "validation failed on field 'email'"
                },
                "error": {
                    "description": "user-friendly message",
                    "type": "string",
                    "example": "Invalid request"
                }
            }
        },
        "inventory.CreateInventoryRequest": {
            "type": "object",
            "required": [
                "category",
                "description",
                "images",
                "location",
                "name",
                "packaging",
                "price",
                "slug",
                "stock",
                "unit"
            ],
            "properties": {
                "admin_id": {
                    "description": "Foreign key",
                    "type": "string"
                },
                "category": {
                    "description": "e.g. “Dairy”",
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "images": {
                    "description": "could be JSON array or URLs",
                    "type": "string"
                },
                "location": {
                    "description": "optional",
                    "type": "string"
                },
                "name": {
                    "description": "e.g. “Fresh Milk”",
                    "type": "string"
                },
                "packaging": {
                    "description": "“Bucket/Single”",
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "slug": {
                    "type": "string"
                },
                "stock": {
                    "type": "integer"
                },
                "unit": {
                    "description": "\"per litre\", \"per bucket\"",
                    "type": "string"
                }
            }
        },
        "inventory.Inventory": {
            "type": "object",
            "properties": {
                "admin_id": {
                    "description": "Foreign key",
                    "type": "string"
                },
                "category": {
                    "description": "e.g. “Dairy”",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "images": {
                    "description": "could be JSON array or URLs",
                    "type": "string"
                },
                "location": {
                    "description": "optional",
                    "type": "string"
                },
                "name": {
                    "description": "e.g. “Fresh Milk”",
                    "type": "string"
                },
                "packaging": {
                    "description": "“Bucket/Single”",
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "slug": {
                    "description": "product slug",
                    "type": "string"
                },
                "stock": {
                    "type": "integer"
                },
                "unit": {
                    "description": "\"per litre\", \"per bucket\"",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "inventory.InventorySummary": {
            "type": "object",
            "properties": {
                "image": {
                    "type": "string"
                },
                "in_stock": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "packaging": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "unit": {
                    "type": "string"
                }
            }
        },
        "inventory.StorePublicView": {
            "type": "object",
            "properties": {
                "admin_name": {
                    "type": "string"
                },
                "category": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "products": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/inventory.InventorySummary"
                    }
                }
            }
        },
        "notification.CreateNotificationRequest": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/notification.NotificationType"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "notification.Notification": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "sent_at": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/notification.NotificationType"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "notification.NotificationType": {
            "type": "string",
            "enum": [
                "email",
                "sms",
                "push"
            ],
            "x-enum-varnames": [
                "Email",
                "SMS",
                "Push"
            ]
        },
        "order.CreateOrderRequest": {
            "type": "object",
            "required": [
                "customer_id",
                "delivery_location",
                "inventory_id",
                "pickup_location",
                "quantity"
            ],
            "properties": {
                "customer_id": {
                    "type": "string"
                },
                "delivery_location": {
                    "type": "string"
                },
                "inventory_id": {
                    "type": "string"
                },
                "pickup_location": {
                    "type": "string"
                },
                "quantity": {
                    "type": "integer"
                }
            }
        },
        "order.Order": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "customer_id": {
                    "type": "string"
                },
                "delivery_location": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "inventory_id": {
                    "type": "string"
                },
                "order_status": {
                    "$ref": "#/definitions/order.OrderStatus"
                },
                "pickup_location": {
                    "type": "string"
                },
                "quantity": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "order.OrderStatus": {
            "type": "string",
            "enum": [
                "pending",
                "assigned",
                "in_transit",
                "delivered",
                "cancelled"
            ],
            "x-enum-varnames": [
                "Pending",
                "Assigned",
                "InTransit",
                "Delivered",
                "Cancelled"
            ]
        },
        "order.UpdateOrderRequest": {
            "type": "object",
            "required": [
                "column",
                "value"
            ],
            "properties": {
                "column": {
                    "description": "e.g. \"status\", \"quantity\"",
                    "type": "string"
                },
                "value": {
                    "description": "Accepts string, int, etc."
                }
            }
        },
        "payment.CreatePaymentRequest": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "method": {
                    "$ref": "#/definitions/payment.PaymentMethod"
                },
                "order_id": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/payment.PaymentStatus"
                }
            }
        },
        "payment.Payment": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "id": {
                    "type": "string"
                },
                "method": {
                    "$ref": "#/definitions/payment.PaymentMethod"
                },
                "order_id": {
                    "type": "string"
                },
                "paid_at": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/payment.PaymentStatus"
                }
            }
        },
        "payment.PaymentMethod": {
            "type": "string",
            "enum": [
                "stripe",
                "paypal",
                "mobile_money",
                "cash_on_delivery"
            ],
            "x-enum-varnames": [
                "MethodStripe",
                "MethodPayPal",
                "MethodMobileMoney",
                "MethodCashOnDelivery"
            ]
        },
        "payment.PaymentStatus": {
            "type": "string",
            "enum": [
                "pending",
                "completed",
                "failed"
            ],
            "x-enum-varnames": [
                "StatusPending",
                "StatusCompleted",
                "StatusFailed"
            ]
        },
        "user.CreateUserRequest": {
            "type": "object",
            "required": [
                "email",
                "fullName",
                "password",
                "phone",
                "role",
                "slug"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "password": {
                    "description": "raw password from client",
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "role": {
                    "enum": [
                        "admin",
                        "driver",
                        "customer"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/user.Role"
                        }
                    ]
                },
                "slug": {
                    "type": "string"
                }
            }
        },
        "user.LoginRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "user.LoginResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "user.Role": {
            "type": "string",
            "enum": [
                "admin",
                "driver",
                "customer"
            ],
            "x-enum-varnames": [
                "Admin",
                "Driver",
                "Customer"
            ]
        },
        "user.UpdateDriverUserProfileRequest": {
            "type": "object",
            "required": [
                "phone"
            ],
            "properties": {
                "phone": {
                    "type": "string"
                }
            }
        },
        "user.UpdateUserRequest": {
            "type": "object",
            "required": [
                "column",
                "value"
            ],
            "properties": {
                "column": {
                    "type": "string"
                },
                "value": {}
            }
        },
        "user.User": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "must_change_password": {
                    "type": "boolean"
                },
                "phone": {
                    "type": "string"
                },
                "role": {
                    "$ref": "#/definitions/user.Role"
                },
                "slug": {
                    "description": "adminSlug used in public route",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "JWT": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "192.168.100.18:8000",
	BasePath:         "/api",
	Schemes:          []string{"http"},
	Title:            "Logistics API",
	Description:      "This is the API for logistics operations.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
