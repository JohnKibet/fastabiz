basePath: /api
definitions:
  delivery.Delivery:
    properties:
      assigned_at:
        type: string
      delivered_at:
        type: string
      driver_id:
        type: string
      id:
        type: string
      order_id:
        type: string
      picked_up_at:
        type: string
      status:
        $ref: '#/definitions/delivery.DeliveryStatus'
    type: object
  delivery.DeliveryStatus:
    enum:
    - assigned
    - picked_up
    - delivered
    - failed
    type: string
    x-enum-varnames:
    - Assigned
    - PickedUp
    - Delivered
    - Failed
  delivery.UpdateDeliveryRequest:
    properties:
      column:
        type: string
      value: {}
    required:
    - column
    - value
    type: object
  driver.CreateDriverRequest:
    properties:
      current_location:
        $ref: '#/definitions/dto.PointDTO'
      email:
        type: string
      full_name:
        type: string
      vehicle_info:
        type: string
    required:
    - current_location
    - email
    - full_name
    - vehicle_info
    type: object
  driver.Driver:
    properties:
      available:
        type: boolean
      created_at:
        type: string
      current_location:
        $ref: '#/definitions/dto.PointDTO'
      email:
        type: string
      full_name:
        type: string
      id:
        type: string
      vehicle_info:
        type: string
    type: object
  driver.UpdateDriverRequest:
    properties:
      column:
        type: string
      value: {}
    required:
    - column
    - value
    type: object
  dto.PointDTO:
    properties:
      srid:
        example: 4326
        type: integer
      x:
        example: 36.8219
        type: number
      "y":
        example: -1.2921
        type: number
    type: object
  feedback.CreateFeedbackRequest:
    properties:
      comments:
        type: string
      customer_id:
        type: string
      order_id:
        type: string
      rating:
        type: integer
    type: object
  feedback.Feedback:
    properties:
      comments:
        type: string
      customer_id:
        type: string
      id:
        type: string
      order_id:
        type: string
      rating:
        type: integer
      submitted_at:
        type: string
    type: object
  handlers.ErrorResponse:
    properties:
      detail:
        description: optional internal error
        example: validation failed on field 'email'
        type: string
      error:
        description: user-friendly message
        example: Invalid request
        type: string
    type: object
  inventory.CreateInventoryRequest:
    properties:
      admin_id:
        description: Foreign key
        type: string
      category:
        description: e.g. “Dairy”
        type: string
      description:
        type: string
      images:
        description: could be JSON array or URLs
        type: string
      location:
        description: optional
        type: string
      name:
        description: e.g. “Fresh Milk”
        type: string
      packaging:
        description: “Bucket/Single”
        type: string
      price_amount:
        type: integer
      price_currency:
        type: string
      slug:
        type: string
      stock:
        type: integer
      unit:
        description: '"per litre", "per bucket"'
        type: string
    required:
    - category
    - description
    - images
    - location
    - name
    - packaging
    - price_amount
    - price_currency
    - slug
    - stock
    - unit
    type: object
  inventory.Inventory:
    properties:
      admin_id:
        description: Foreign key
        type: string
      category:
        description: e.g. “Dairy”
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      images:
        description: could be JSON array or URLs
        type: string
      location:
        description: optional
        type: string
      name:
        description: e.g. “Fresh Milk”
        type: string
      packaging:
        description: “Bucket/Single”
        type: string
      price_amount:
        type: integer
      price_currency:
        type: string
      slug:
        description: product slug
        type: string
      stock:
        type: integer
      unit:
        description: '"per litre", "per bucket"'
        type: string
      updated_at:
        type: string
    type: object
  inventory.InventorySummary:
    properties:
      image:
        type: string
      in_stock:
        type: integer
      name:
        type: string
      packaging:
        type: string
      price:
        $ref: '#/definitions/money.Money'
      unit:
        type: string
    type: object
  inventory.StorePublicView:
    properties:
      admin_name:
        type: string
      category:
        type: string
      location:
        type: string
      products:
        items:
          $ref: '#/definitions/inventory.InventorySummary'
        type: array
    type: object
  invite.CreateInviteRequest:
    properties:
      email:
        type: string
      expires_at:
        type: string
      id:
        type: string
      invited_by:
        type: string
      role:
        $ref: '#/definitions/invite.Role'
      token:
        type: string
    required:
    - email
    - expires_at
    - id
    - invited_by
    - role
    - token
    type: object
  invite.Invite:
    properties:
      created_at:
        type: string
      email:
        type: string
      expires_at:
        type: string
      id:
        type: string
      invited_by:
        type: string
      role:
        $ref: '#/definitions/invite.Role'
      token:
        type: string
    type: object
  invite.Role:
    enum:
    - admin
    - driver
    - customer
    - guest
    type: string
    x-enum-varnames:
    - Admin
    - Driver
    - Customer
    - Guest
  money.Money:
    properties:
      amount:
        type: integer
      currency:
        type: string
    type: object
  notification.CreateNotificationRequest:
    properties:
      message:
        type: string
      type:
        $ref: '#/definitions/notification.NotificationType'
      user_id:
        type: string
    type: object
  notification.Notification:
    properties:
      id:
        type: string
      message:
        type: string
      sent_at:
        type: string
      type:
        $ref: '#/definitions/notification.NotificationType'
      user_id:
        type: string
    type: object
  notification.NotificationType:
    enum:
    - email
    - sms
    - push
    type: string
    x-enum-varnames:
    - Email
    - SMS
    - Push
  order.CreateOrderRequest:
    properties:
      admin_id:
        type: string
      customer_id:
        type: string
      delivery_address:
        type: string
      delivery_point:
        $ref: '#/definitions/dto.PointDTO'
      inventory_id:
        type: string
      pickup_address:
        type: string
      pickup_point:
        $ref: '#/definitions/dto.PointDTO'
      quantity:
        type: integer
    required:
    - admin_id
    - customer_id
    - inventory_id
    - quantity
    type: object
  order.Customer:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  order.DropdownDataRequest:
    properties:
      customers:
        items:
          $ref: '#/definitions/order.Customer'
        type: array
      inventories:
        items:
          $ref: '#/definitions/order.Inventory'
        type: array
    type: object
  order.Inventory:
    properties:
      admin_id:
        type: string
      category:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  order.Order:
    properties:
      admin_id:
        type: string
      created_at:
        type: string
      customer_id:
        type: string
      delivery_address:
        type: string
      delivery_point:
        $ref: '#/definitions/dto.PointDTO'
      id:
        type: string
      inventory_id:
        type: string
      pickup_address:
        type: string
      pickup_point:
        $ref: '#/definitions/dto.PointDTO'
      quantity:
        type: integer
      status:
        $ref: '#/definitions/order.OrderStatus'
      updated_at:
        type: string
    type: object
  order.OrderStatus:
    enum:
    - pending
    - assigned
    - in_transit
    - delivered
    - cancelled
    type: string
    x-enum-varnames:
    - Pending
    - Assigned
    - InTransit
    - Delivered
    - Cancelled
  order.UpdateOrderRequest:
    properties:
      column:
        description: e.g. "status", "quantity"
        type: string
      value:
        description: Accepts string, int, etc.
    required:
    - column
    - value
    type: object
  payment.CreatePaymentRequest:
    properties:
      amount:
        type: integer
      currency:
        type: string
      method:
        $ref: '#/definitions/payment.PaymentMethod'
      order_id:
        type: string
      status:
        $ref: '#/definitions/payment.PaymentStatus'
    type: object
  payment.Payment:
    properties:
      amount:
        type: integer
      currency:
        type: string
      id:
        type: string
      method:
        $ref: '#/definitions/payment.PaymentMethod'
      order_id:
        type: string
      paid_at:
        type: string
      status:
        $ref: '#/definitions/payment.PaymentStatus'
    type: object
  payment.PaymentMethod:
    enum:
    - stripe
    - paypal
    - mobile_money
    - cash_on_delivery
    type: string
    x-enum-varnames:
    - MethodStripe
    - MethodPayPal
    - MethodMobileMoney
    - MethodCashOnDelivery
  payment.PaymentStatus:
    enum:
    - pending
    - completed
    - failed
    type: string
    x-enum-varnames:
    - StatusPending
    - StatusCompleted
    - StatusFailed
  user.CreateUserRequest:
    properties:
      email:
        type: string
      fullName:
        type: string
      password:
        description: raw password from client
        type: string
      phone:
        type: string
      role:
        allOf:
        - $ref: '#/definitions/user.Role'
        enum:
        - admin
        - driver
        - customer
      slug:
        type: string
    required:
    - email
    - fullName
    - password
    - phone
    - role
    - slug
    type: object
  user.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  user.LoginResponse:
    properties:
      email:
        type: string
      fullName:
        type: string
      id:
        type: string
      role:
        type: string
      token:
        type: string
    type: object
  user.Role:
    enum:
    - admin
    - driver
    - customer
    - guest
    type: string
    x-enum-varnames:
    - Admin
    - Driver
    - Customer
    - Guest
  user.UpdateDriverUserProfileRequest:
    properties:
      phone:
        type: string
    required:
    - phone
    type: object
  user.UpdateUserRequest:
    properties:
      column:
        type: string
      value: {}
    required:
    - column
    - value
    type: object
  user.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      fullName:
        type: string
      id:
        type: string
      last_login:
        type: string
      must_change_password:
        type: boolean
      phone:
        type: string
      role:
        $ref: '#/definitions/user.Role'
      slug:
        description: adminSlug used in public route
        type: string
      status:
        $ref: '#/definitions/user.UserStatus'
      updated_at:
        type: string
    type: object
  user.UserStatus:
    enum:
    - active
    - inactive
    - suspended
    - pending
    type: string
    x-enum-varnames:
    - Active
    - Inactive
    - Suspended
    - Pending
host: localhost:8000
info:
  contact: {}
  description: This is the API for logistics operations.
  title: Logistics API
  version: "1.0"
paths:
  /deliveries/{id}:
    delete:
      consumes:
      - application/json
      description: Permanently deletes a delivery by their ID
      parameters:
      - description: Delivery ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Delivery deleted
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid Delivery ID
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - JWT: []
      summary: Delete a delivery
      tags:
      - deliveries
  /deliveries/{id}/accept:
    put:
      description: When a driver accepts an order assignment, this endpoint creates
        the delivery record, marks the order as in-transit, sets the pickup timestamp,
        and marks the driver as unavailable. Only callable by authenticated drivers.
      parameters:
      - description: Delivery ID (corresponds to the order assignment)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Created and accepted delivery
          schema:
            $ref: '#/definitions/delivery.Delivery'
        "400":
          description: Missing or invalid delivery ID
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Failed to accept delivery
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - JWT: []
      summary: Accept order assignment and create delivery
      tags:
      - deliveries
  /deliveries/{id}/update:
    put:
      consumes:
      - application/json
      description: Update any delivery struct field of an existing delivery
      parameters:
      - description: Delivery ID
        in: path
        name: delivery_id
        required: true
        type: string
      - description: Field and value to update
        in: body
        name: update
        required: true
        schema:
          $ref: '#/definitions/delivery.UpdateDeliveryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid delivery ID or request body
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - JWT: []
      summary: Update Delivery
      tags:
      - deliveries
  /deliveries/all_deliveries:
    get:
      description: Get a list of all deliveries
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/delivery.Delivery'
            type: array
      security:
      - JWT: []
      summary: List all deliveries
      tags:
      - deliveries
  /deliveries/by-id/{id}:
    get:
      description: Retrieve a delivery by their ID
      parameters:
      - description: Delivery ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/delivery.Delivery'
        "400":
          description: Invalid ID
          schema:
            type: string
        "404":
          description: Delivery not found
          schema:
            type: string
      security:
      - JWT: []
      summary: Get delivery by ID
      tags:
      - deliveries
  /drivers/{id}:
    delete:
      consumes:
      - application/json
      description: Permanently deletes a driver by their ID
      parameters:
      - description: Driver ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Driver deleted
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid driver ID
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - JWT: []
      summary: Delete a driver
      tags:
      - drivers
  /drivers/{id}/profile:
    patch:
      consumes:
      - application/json
      description: Updates the vehicle information and current location of a driver
      parameters:
      - description: Driver ID
        in: path
        name: driver_id
        required: true
        type: string
      - description: Driver profile fields to update
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/driver.UpdateDriverRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - JWT: []
      summary: Update driver profile
      tags:
      - drivers
  /drivers/{id}/update:
    put:
      consumes:
      - application/json
      description: Updates a driver's specific field (e.g., VehicleInfo, CurrentLocation)
        based on driver ID
      parameters:
      - description: Driver ID
        in: path
        name: id
        required: true
        type: string
      - description: Field and value to update
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/driver.UpdateDriverRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid driver ID or request body
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - JWT: []
      summary: Update a specific driver field
      tags:
      - drivers
  /drivers/all_drivers:
    get:
      description: Get a list of all registered drivers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/driver.Driver'
            type: array
      security:
      - JWT: []
      summary: List all drivers
      tags:
      - drivers
  /drivers/by-email/{email}:
    get:
      description: Retrieve a driver by their Email
      parameters:
      - description: Driver Email
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/driver.Driver'
        "400":
          description: Invalid Email
          schema:
            type: string
        "404":
          description: Driver not found
          schema:
            type: string
      security:
      - JWT: []
      summary: Get driver by Email
      tags:
      - drivers
  /drivers/by-id/{id}:
    get:
      description: Retrieve a driver by their ID
      parameters:
      - description: Driver ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/driver.Driver'
        "400":
          description: Invalid ID
          schema:
            type: string
        "404":
          description: Driver not found
          schema:
            type: string
      security:
      - JWT: []
      summary: Get driver by ID
      tags:
      - drivers
  /drivers/create:
    post:
      consumes:
      - application/json
      description: Register a new driver with name, email, etc.
      parameters:
      - description: User Input
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/driver.CreateDriverRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/driver.Driver'
        "400":
          description: Invalid request
          schema:
            type: string
        "500":
          description: Failed to create driver
          schema:
            type: string
      security:
      - JWT: []
      summary: Create a new driver
      tags:
      - drivers
  /feedbacks/{id}:
    get:
      description: Retrieve a feedback by their ID
      parameters:
      - description: Feedback ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/feedback.Feedback'
        "400":
          description: Invalid ID
          schema:
            type: string
        "404":
          description: Feedback not found
          schema:
            type: string
      security:
      - JWT: []
      summary: Get feedback by ID
      tags:
      - feedbacks
  /feedbacks/all_feedbacks:
    get:
      description: Get a list of all feedbacks
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/feedback.Feedback'
            type: array
      security:
      - JWT: []
      summary: List all feedbacks
      tags:
      - feedbacks
  /feedbacks/create:
    post:
      consumes:
      - application/json
      description: Create a new feedback with order_id, customer_id, etc.
      parameters:
      - description: User Input
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/feedback.CreateFeedbackRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/feedback.Feedback'
        "400":
          description: Invalid request
          schema:
            type: string
        "500":
          description: Failed to create feedback
          schema:
            type: string
      security:
      - JWT: []
      summary: Create a new feedback
      tags:
      - feedbacks
  /inventories/{id}:
    delete:
      consumes:
      - application/json
      description: Permanently deletes an inventory by their ID
      parameters:
      - description: Inventory ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Inventory deleted
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid inventory ID
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - JWT: []
      summary: Delete an inventory
      tags:
      - inventories
  /inventories/all_inventories:
    get:
      description: List all inventories with optional pagination
      parameters:
      - description: Limit number of items
        in: query
        name: limit
        type: integer
      - description: Offset for pagination
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/inventory.Inventory'
            type: array
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - JWT: []
      summary: List all inventories
      tags:
      - inventories
  /inventories/by-category:
    get:
      description: Get all inventory items in a specific category
      parameters:
      - description: Category Name
        in: query
        name: category
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/inventory.Inventory'
            type: array
        "400":
          description: Invalid Category
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - JWT: []
      summary: Get inventories by category
      tags:
      - inventories
  /inventories/by-id/{id}:
    get:
      description: Get a specific inventory item by UUID
      parameters:
      - description: Inventory ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/inventory.Inventory'
        "400":
          description: Invalid inventory ID or request body
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - JWT: []
      summary: Get inventory by ID
      tags:
      - inventories
  /inventories/by-name:
    get:
      description: Search inventory by item name (exact match)
      parameters:
      - description: Inventory Name
        in: query
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/inventory.Inventory'
        "400":
          description: Invalid inventory ID or request body
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - JWT: []
      summary: Get inventory by name
      tags:
      - inventories
  /inventories/categories:
    get:
      description: Get all unique categories that belong to existing inventories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - JWT: []
      summary: List all categories
      tags:
      - inventories
  /inventories/create:
    post:
      consumes:
      - application/json
      description: Creates an inventory and returns the created object
      parameters:
      - description: Inventory input
        in: body
        name: inventory
        required: true
        schema:
          $ref: '#/definitions/inventory.CreateInventoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/inventory.Inventory'
        "400":
          description: Invalid inventory ID or request body
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - JWT: []
      summary: Create a new inventory
      tags:
      - inventories
  /invites/{id}:
    delete:
      description: Delete an invite by ID
      parameters:
      - description: Invite ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid invite ID
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Delete an invite
      tags:
      - Invites
  /invites/all_invites:
    get:
      description: Get all invites that are pending
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/invite.Invite'
            type: array
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: List all pending invites
      tags:
      - Invites
  /invites/by-token:
    get:
      description: Fetch an invite using a token
      parameters:
      - description: Invite token
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/invite.Invite'
        "400":
          description: Invalid Token
          schema:
            type: string
        "404":
          description: Invite not found
          schema:
            type: string
      summary: Get invite by token
      tags:
      - Invites
  /invites/create:
    post:
      consumes:
      - application/json
      description: Create a new invite for a user
      parameters:
      - description: Invite payload
        in: body
        name: invite
        required: true
        schema:
          $ref: '#/definitions/invite.CreateInviteRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Create a new invite
      tags:
      - Invites
  /notifications/{id}:
    get:
      description: Retrieve a notification by their ID
      parameters:
      - description: Notification ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/notification.Notification'
        "400":
          description: Invalid ID
          schema:
            type: string
        "404":
          description: Notification not found
          schema:
            type: string
      security:
      - JWT: []
      summary: Get notification by ID
      tags:
      - notifications
  /notifications/all_notifications:
    get:
      description: Get a list of all notifications
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/notification.Notification'
            type: array
      security:
      - JWT: []
      summary: List all notifications
      tags:
      - notifications
  /notifications/create:
    post:
      consumes:
      - application/json
      description: Create a new notification with user_id, message, etc.
      parameters:
      - description: User Input
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/notification.CreateNotificationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/notification.Notification'
        "400":
          description: Invalid request
          schema:
            type: string
        "500":
          description: Failed to create notification
          schema:
            type: string
      security:
      - JWT: []
      summary: Create a new notification
      tags:
      - notifications
  /orders/{id}:
    delete:
      consumes:
      - application/json
      description: Permanently deletes an order by their ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Order deleted
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid order ID
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - JWT: []
      summary: Delete a order
      tags:
      - orders
  /orders/{id}/update:
    put:
      consumes:
      - application/json
      description: Update any order struct field of an existing order
      parameters:
      - description: Order ID
        in: path
        name: order_id
        required: true
        type: string
      - description: Field and value to update
        in: body
        name: update
        required: true
        schema:
          $ref: '#/definitions/order.UpdateOrderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid order ID or request body
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - JWT: []
      summary: Update Order
      tags:
      - orders
  /orders/all_orders:
    get:
      description: Get a list of all orders
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/order.Order'
            type: array
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - JWT: []
      summary: List all orders
      tags:
      - orders
  /orders/by-customer/{customer_id}:
    get:
      description: Fetch order(s) using Customer ID
      parameters:
      - description: Customer ID
        in: path
        name: customer_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/order.Order'
            type: array
        "400":
          description: Invalid Customer ID
          schema:
            type: string
        "404":
          description: Not found
          schema:
            type: string
      security:
      - JWT: []
      summary: Get order by Customer ID
      tags:
      - orders
  /orders/by-id/{id}:
    get:
      description: Fetch a single order using UUID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/order.Order'
        "400":
          description: Invalid ID
          schema:
            type: string
        "404":
          description: Not found
          schema:
            type: string
      security:
      - JWT: []
      summary: Get order by ID
      tags:
      - orders
  /orders/create:
    post:
      consumes:
      - application/json
      description: Creates an order and returns the new object
      parameters:
      - description: Order input
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/order.CreateOrderRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/order.Order'
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - JWT: []
      summary: Create a new order
      tags:
      - orders
  /orders/form-data:
    get:
      description: Returns a list of customers and inventories for populating order
        form dropdowns.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/order.DropdownDataRequest'
        "500":
          description: Failed to fetch customers or inventories
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get data for order form dropdowns
      tags:
      - orders
  /payments/{id}:
    get:
      description: Fetch a single payment using payment ID
      parameters:
      - description: Payment ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payment.Payment'
        "400":
          description: Invalid ID
          schema:
            type: string
        "404":
          description: Not found
          schema:
            type: string
      security:
      - JWT: []
      summary: Get payment by ID
      tags:
      - payments
  /payments/{order_id}:
    get:
      description: Fetch payment(s) using Order ID
      parameters:
      - description: Order ID
        in: path
        name: order_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/payment.Payment'
            type: array
        "400":
          description: Invalid Order ID
          schema:
            type: string
        "404":
          description: Not found
          schema:
            type: string
      security:
      - JWT: []
      summary: Get payment by Order ID
      tags:
      - payments
  /payments/all_payments:
    get:
      description: Get a list of all payments
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/payment.Payment'
            type: array
      security:
      - JWT: []
      summary: List all payments
      tags:
      - payments
  /payments/create:
    post:
      consumes:
      - application/json
      description: Register new payment with order_id, amount, etc.
      parameters:
      - description: User Input
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/payment.CreatePaymentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/payment.Payment'
        "400":
          description: Invalid request
          schema:
            type: string
        "500":
          description: Failed to create payment
          schema:
            type: string
      security:
      - JWT: []
      summary: Create new payment
      tags:
      - payments
  /public/create:
    post:
      consumes:
      - application/json
      description: Register a new user with name, email, etc.
      parameters:
      - description: User Input
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/user.User'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Create a new user
      tags:
      - public
  /public/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user using email and password and returns a JWT
        token.
      parameters:
      - description: User login credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.LoginResponse'
        "400":
          description: Invalid request
          schema:
            type: string
        "401":
          description: Invalid credentials
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Login user
      tags:
      - public
  /public/store/{adminSlug}:
    get:
      description: View all public products for an admin store by slug
      parameters:
      - description: Admin Slug
        in: path
        name: adminSlug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/inventory.StorePublicView'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: View public store page
      tags:
      - public
  /public/store/{adminSlug}/product/{productSlug}:
    get:
      description: View a specific product by admin slug and product slug
      parameters:
      - description: Admin Slug
        in: path
        name: adminSlug
        required: true
        type: string
      - description: Product Slug
        in: path
        name: productSlug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/inventory.Inventory'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: View public product page
      tags:
      - public
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Permanently deletes a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User profile deleted
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - JWT: []
      summary: Delete a user
      tags:
      - users
  /users/{id}/profile:
    patch:
      consumes:
      - application/json
      description: Updates the phone number of a user (commonly used by a driver after
        initial registration)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User phone update payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/user.UpdateDriverUserProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Profile updated successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - JWT: []
      summary: Update user phone number
      tags:
      - users
  /users/{id}/update:
    put:
      consumes:
      - application/json
      description: Updates a user's specific field (e.g., FullName, Email) based on
        user ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Field and value to update
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/user.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid user ID or request body
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - JWT: []
      summary: Update a specific user field
      tags:
      - users
  /users/all_users:
    get:
      description: Get a list of all registered users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/user.User'
            type: array
      security:
      - JWT: []
      summary: List all users
      tags:
      - users
  /users/by-email/{email}:
    get:
      description: Retrieve a user by their Email
      parameters:
      - description: User Email
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.User'
        "400":
          description: Invalid Email
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
      security:
      - JWT: []
      summary: Get user by Email
      tags:
      - users
  /users/by-id/{id}:
    get:
      description: Retrieve a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.User'
        "400":
          description: Invalid ID
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
      security:
      - JWT: []
      summary: Get user by ID
      tags:
      - users
schemes:
- http
securityDefinitions:
  JWT:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
